<?php

/**
 * @file
 * Install, update and uninstall functions for the contact module.
 */


/**
 * Implements hook_install().
 */
function crm_core_contact_install() {
  // Add default contact type for an Individual person
  $individual = crm_core_contact_type_new();
  $individual->type = 'individual';
  $individual->name = t('Individual');
  $individual->description = t('A single individual.');
  $individual->locked = 1;
  $individual->is_new = TRUE;
  crm_core_contact_type_save($individual);
  crm_core_contact_type_initialize('individual');

  // Add default contact type for an organization
  $organization = crm_core_contact_type_new();
  $organization->type = 'organization';
  $organization->name = t('Organization');
  $organization->description = t('A collection of individuals or other organizations that has additional contact data.');
  $organization->locked = 1;
  $organization->is_new = TRUE;
  crm_core_contact_type_save($organization);
  crm_core_contact_type_initialize('organization');

  // Add default contact type for a household
  $household = crm_core_contact_type_new();
  $household->type = 'household';
  $household->name = t('Household');
  $household->description = t('A collection of individuals generally located at the same residence.');
  $household->locked = 1;
  $household->is_new = TRUE;
  crm_core_contact_type_save($household);
  crm_core_contact_type_initialize('household');
}

/**
 * Implements hook_uninstall().
 */
function crm_core_contact_uninstall() {
   // Instance field information field_info_field is not available
   // because we have already unloaded our module
   $additional_params = array('include_inactive' => TRUE);
   $instances = field_read_instances(array('entity_type' => 'crm_core_contact'), $additional_params);
   foreach($instances as $instance) {
     field_delete_field($instance['field_name']);
   }
}


/**
 * Implements hook_schema().
 */
function crm_core_contact_schema() {
  $schema['crm_core_contact'] = array(
    'description' => 'Stores contact data.',
    'fields' => array(
      'contact_id' => array(
        'description' => 'The primary identifer for a contact.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The current {crm_core_contact_revision}.vid of this contact.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The {crm_core_contact_type}.type of contact.',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when contact was created.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when contact was last changed',
      ),
    ),
    'indexes' => array(
      'created' => array('created'),
      'changed' => array('changed'),
    ),
    'foreign keys' => array(
      'contact_revision' => array(
        'table' => 'crm_core_contact_revision',
        'columns' => array('vid' => 'vid'),
      ),
    ),
    'primary key' => array('contact_id'),
  );

  $schema['crm_core_contact_revision'] = array(
    'description' => 'Saves information about each saved revision of a {crm_core_contact}',
    'fields' => array(
      'vid' => array(
        'description' => 'The primary identifier of this {crm_core_contact_revision}.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'contact_id' => array(
        'description' => 'The {crm_core_contact}.contact_id for this revision.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'created' => array(
        'description' => 'The unix timestamp for when this revision was created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'The unix timestamp for when this revision was last changed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that created this version.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'versioned_contact' => array(
        'table' => 'crm_core_contact',
        'columns' => array('contact_id' => 'contact_id'),
      ),
      'version_creator' => array(
        'table' => 'user',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('vid'),
  );

  $schema['crm_core_contact_type'] = array(
    'description' => 'Stores information about all defined contact types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique contact type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'custom' => array(
        'description' => 'A boolean indicating whether this type is defined by a module (FALSE) or by a user via Add content type (TRUE).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'disabled' => array(
        'description' => 'A boolean indicating whether this type is disabled or not, disabled contact type contacts will not show up in the list of contacts',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether this type is locked or not, locked contact type cannot be edited or disabled/deleted',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Initialize new contact type with basic fields.
 *
 * @param string $type
 *   The contact type (machine readable name) going to be
 *   stored in the field instance
 */
function crm_core_contact_type_initialize($type) {
  $fields = array();

  // Name field
  $fields[] = array(
    'field_name' => 'contact_name',
    'type' => 'name',
    'entity_types' => array('crm_core_contact'),
    'translatable' => FALSE,
    'locked' => TRUE,
    'settings' => array(
      // work around, all contact_name field requires at least
      // given, household, organizations just need one name field/component
      'minimum_components' => array('given' => 'given'),
    ),
  );



  // Image field
  $fields[] = array(
    'field_name' => 'contact_image',
    'type' => 'image',
    'entity_types' => array('crm_core_contact'),
    'translatable' => FALSE,
    'locked' => FALSE,
  );

  // Create the fields if they don't exist
  foreach ($fields as $field) {
    $info = field_info_field($field['field_name']);
    if (empty($info)) {
      field_create_field($field);
    }
  }

  // Create field instances for the type if they don't exist
  $instances = array();

  $instances[] = array(
    'field_name' => 'contact_name',
    'entity_type' => 'crm_core_contact',
    'bundle' => $type,
    'label' => t('Name'),
    'required' => TRUE,
    'widget' => array(
      'type' => 'name_widget',
    ),
    'display' => array(),
  );

  // For household or organizations, the label should be reflected
  if ($type == 'organization' || $type == 'household') {
    $instances[0]['label'] = t('@type name', array('@type' => ucwords($type)));

    // work around, using inline css to hide the rest of the name components
    // this is due to http://drupal.org/node/1324054
    $instances[0]['settings']['inline_css'] = array(
      'title' => 'display:none',
      'middle' => 'display:none',
      'family' => 'display:none',
      'generational' => 'display:none',
      'credentials' => 'display:none',
    );
  }

  $instances[] = array(
    'field_name' => 'contact_image',
    'entity_type' => 'crm_core_contact',
    'bundle' => $type,
    'label' => t('Image'),
    'required' => FALSE,
    'settings' => array(),
    'widget' => array(
      'type' => 'image_image',
    ),
    'display' => array(
      'default' => array (
        'label' => 'hidden',
        'type' => 'image',
        'weight' => '1',
        'settings' =>
        array (
          'image_style' => 'medium',
          'image_link' => '',
        ),
        'module' => 'image',
      ),
    ),
  );

  // Create field instances if they don't exist
  foreach ($instances as $instance) {
    $info_instance = field_info_instance('crm_core_contact', $instance['field_name'], $type);
    if (empty($info_instance)) {
      field_create_instance($instance);
    }
  }
}

/**
 * Add database table fields 'module' and 'status' for exportability.
 */
function crm_core_contact_update_7001() {
  $table = 'crm_core_contact_type';
  // Remove old primary key.
  db_drop_primary_key($table);

  db_add_field($table, 'id', array(
      'type' => 'serial',
      'not null' => TRUE,
      'description' => 'Primary Key: Unique contact type ID.',
    ),
    array('primary key' => array('id'))
  );

  foreach (entity_exportable_schema_fields() as $field => $spec) {
    db_add_field($table, $field, $spec);
  }

  // Set unique key.
  db_add_unique_key($table, 'type', array('type'));
}