<?php
/**
 * Implements hook_menu()
 */
function crm_core_relationship_ui_menu() {
  $items = array();

  /*
   * CRM Contact Relationships
   */
  $items['crm/contact/%crm_core_contact/relationships'] = array(
    'title' => 'Relationships',
    'description' => 'View contact relationships',
    'page callback' => 'crm_core_relationship_ui_contact_relationships',
    'page arguments' => array(2, NULL),
    'access callback' => 'crm_core_relationship_access_permissions',
    'access arguments' => array(null, 'view_list'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'crm_core_relationship_ui.pages.inc',
  );

  $items['crm/contact/%crm_core_contact/relationships/add'] = array(
      'title' => 'Add relationship',
      'description' => 'Add a relationship to this contact',
      'page callback' => 'crm_core_relationship_ui_add_relationship',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_LOCAL_ACTION,
      //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'crm_core_relationship_ui.pages.inc',
    );

  foreach (crm_core_relationship_get_relationships() as $type => $info) {
    $items['crm/contact/%crm_core_contact/relationships/add/' . $type . '/%'] = array(
      'title' => 'Add ' . $info->label,
      'description' => 'Add a relationship to this contact',
      'page callback' => 'crm_core_relation_entity_ui_get_form_wrapper',
      'page arguments' => array(2, 5, 6),
      'access callback' => 'crm_core_relationship_access_permissions',
      'access arguments' => array(null, 'create_view'),
      'type' => MENU_NORMAL_ITEM,
      //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'crm_core_relationship_ui.pages.inc',
    );
  }

  /*
   * TODO: what does this router item do?
   *       I think all it does is create notices, it does not seem to be used
   *
  $items['crm/contact/%crm_core_contact/relationships/add/%relation_type/%'] = array(
    'title' => 'Add Contact Relationship',
    'description' => 'Add a relationship to this contact',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_relationship_ui_add_relationship_form', 2, 5, 6),
    'access callback' => 'crm_core_relationship_access_permissions',
    'access arguments' => array(5, 'create'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'crm_core_relationship_ui.pages.inc',
  );
  */

  $items['crm/contact/%crm_core_contact/relationships/add/%relation_type/%/autocomplete'] = array(
    'page callback' => 'crm_core_relationship_ui_add_relationship_autocomplete',
    'page arguments' => array(2, 5, 6),
    'access callback' => 'crm_core_relationship_access_permissions',
    'access arguments' => array(5, 'create'),
    'type' => MENU_CALLBACK,
    'file' => 'crm_core_relationship_ui.pages.inc',
  );

  $items['crm/relationships/%relation_type/%/autocomplete'] = array(
    'page callback' => 'crm_core_relationship_ui_add_relationship_autocomplete',
    'page arguments' => array(NULL, 2, 3),
    'access callback' => 'crm_core_relationship_access_permissions',
    'access arguments' => array(5, 'create'),
    'type' => MENU_CALLBACK,
    'file' => 'crm_core_relationship_ui.pages.inc',
  );

  /*
   * CRM Relationship types
   */
  $items['admin/structure/crm/relationship-types'] = array(
    'title' => 'CRM Relationship Types',
    'description' => 'Manage relationship types.',
    'page callback' => 'crm_core_relationship_ui_types_overview',
    'access callback' => 'crm_core_relationship_access_permissions',
    'access arguments' => array(null, 'admin'),
    'file' => 'crm_core_relationship_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );


  $items['admin/structure/crm/relationship-types/add'] = array(
    'title' => 'Add crm relationship type',
    'access callback' => 'crm_core_relationship_access_permissions',
    'access arguments' => array(null, 'admin'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_relationship_ui_type_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'crm_core_relationship_ui.admin.inc',
  );

  $items['admin/structure/crm/relationship-types/manage/%crm_core_relationship_ui_relationship_type'] = array(
    'title' => 'Edit crm relationship type',
    'access callback' => 'crm_core_relationship_access_permissions',
    'access arguments' => array(null, 'admin'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_relationship_ui_type_form', 5),
    'file' => 'crm_core_relationship_ui.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/crm/relationship-types/manage/%crm_core_relationship_ui_relationship_type/delete'] = array(
    'access callback' => 'crm_core_relationship_access_permissions',
    'access arguments' => array(null, 'admin'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_relationship_ui_type_delete_confirm', 5),
    'file' => 'crm_core_relationship_ui.admin.inc',
    'type' => MENU_CALLBACK,
  );


  return $items;
}

/**
 * Implements hook_menu_alter
 */
function crm_core_relationship_ui_menu_alter(&$items) {
  // we are simply hiding crm relationships from other types of relations
  $items['admin/structure/relation']['page callback'] = 'crm_core_relationship_ui_types_overview';
  $items['admin/structure/relation']['file path'] = drupal_get_path('module', 'crm_core_relationship_ui');
  $items['admin/structure/relation']['file'] = 'crm_core_relationship_ui.admin.inc';
  $items['admin/structure/relation']['page arguments'] = array(1);
}

/**
 * Implements hook_form_alter
 */
function crm_core_relationship_ui_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_field_overview_form' || $form_id == 'field_ui_display_overview_form') {
    // we only care about crm contact types (bundles)
    // setting title to the fields form
    if (crm_core_relationship_is_relationship_type($form['#bundle'])) {
      drupal_set_title($form['#bundle']);
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function crm_core_relationship_entity_info_alter(&$entity_info) {
  // we are only altering the admin path for CRM relationship types
  foreach (relation_get_types() as $type => $info) {
    if (crm_core_relationship_is_relationship_type($type)) {
      $entity_info['relation']['bundles'][$type]['label'] = $type;
      $entity_info['relation']['bundles'][$type]['admin'] = array(
        'path' => 'admin/structure/crm/relationship-types/manage/%relation_type',
        'real path' => 'admin/structure/crm/relationship-types/manage/' . $type,
        'bundle argument' => 5,
        'access callback' => 'crm_core_relationship_access_permissions',
        'access arguments' => array(null, 'admin'),
      );
    }
  }
}


/**
 * Argument loading function
 *
 * @param string $relationship_type
 * machine readable name of the relationship type
 *
 * @return object $relation_type
 * A loaded relation type object
 */
function crm_core_relationship_ui_relationship_type_load($relationship_type) {
  return relation_type_load($relationship_type);
}

/**
 * Implements hook_field_formatter_info_alter
 */
function crm_core_relationship_ui_field_formatter_info_alter(&$info) {
  // we will add our own field formatter
  // for display relationships
  $info['contact_relationship'] = array(
    'label' => t('Related Contact'),
    'field types' => array('relation_endpoint'),
    'module' => 'crm_core_relationship_ui',
  );
  $info['contact_relationship_view'] = array(
    'label' => t('Related Contact Relashions table view'),
    'field types' => array('relation_endpoint'),
    'module' => 'crm_core_relationship_ui',
  );
}

/**
 * Implements hook_field_formatter_view
 */
function crm_core_relationship_ui_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
   switch ($display['type']) {
    case 'contact_relationship':
      // getting the contact id from the url
      $current_contact_id = arg(2);
      $related_contact_id = ($items[1]['entity_id'] == $current_contact_id) ? $items[0]['entity_id'] : $items[1]['entity_id'];
      $related_contact = crm_core_contact_load($related_contact_id);
      $contact_label = entity_label('crm_core_contact', $related_contact);
      $relationship_type = ($items[1]['entity_id'] == $current_contact_id) ? crm_core_relationship_get_type_label($entity, TRUE) : crm_core_relationship_get_type_label($entity);
      $created = date('Y-m-d H:i:s', $entity->created);
      $related_contact_uri = entity_uri('crm_core_contact', $related_contact);

      $rows[] = array(
        l($contact_label, $related_contact_uri['path'], $related_contact_uri['options']),
        $relationship_type,
        $created,
      );
        $headers = array('Related Contact', 'Relationship Type', 'Created');
        return array(
          '#theme' => 'table',
          '#header' => $headers,
          '#rows' => $rows,
        );
      break;
    case 'contact_relationship_view':
      // getting the contact id from the url
      $current_contact_id = arg(2);
      $related_contact_id = ($items[1]['entity_id'] == $current_contact_id) ? $items[0]['entity_id'] : $items[1]['entity_id'];
      $related_contact = crm_core_contact_load($related_contact_id);
      $contact_label = entity_label('crm_core_contact', $related_contact);

      $related_contact_uri = entity_uri('crm_core_contact', $related_contact);
      return array(0 => array('#markup' => l($contact_label, $related_contact_uri['path'])));
      break;
  }
}

/**
 * Implements hook_views_api().
 */
function crm_core_relationship_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_core_relationship_ui'),
  );
}

/**
 * Alter query of view "crm_relationships_by_contact".
 */
function crm_core_relationship_ui_query_views_crm_relationships_by_contact_alter($query) {
  $where =& $query->conditions();
  if (!isset($where[0]['field'])) {
    return;
  }
  $field_conditions =& $where[0]['field']->conditions();
  $field_field_conditions =& $field_conditions[0]['field']->conditions();

  // If condition is to find active relationships we also include NULL values.
  if ($field_field_conditions[0]['operator'] == 'not in') {
    unset($field_field_conditions[0]);
    $or = db_or();
    $or->condition('field_data_field_relationship_active.field_relationship_active_value', NULL, 'IS');
    $or->condition('field_data_field_relationship_active.field_relationship_active_value', 'active', '<>');
    $query->condition($or);
  }
}
