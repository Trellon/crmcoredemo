<?php
/**
 * @file
 * Code for the CRM Core Donation feature.
 * 
 * This module handles most of the default settings necessary to run
 * CRM Core Demo. It also includes a number of enhancements that demonstrate 
 * ways of working with CRM Core features in Drupal.
 */

include_once('crm_core_donation.features.inc');

// @bug fix, prevent ajax error when switching payments
module_load_include('inc', 'crm_core_profile', 'crm_core_profile.forms');

/**
 * Implements hook_menu().
 */
function crm_core_donation_menu() {

  // default path for donation pages
  $items['donation_pages/%'] = array(
    'title' => 'Donate today',
    'page callback' => 'crm_core_donation_page_callback',
    'page arguments' => array(1),
    'access arguments' => array('access crm core donation page'),
    'file' => 'crm_core_donation.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // donation widgets
  $items['donation_widgets/%'] = array(
    'title' => 'Donation widget',
    'page callback' => 'crm_core_donation_widget',
    'page arguments' => array(1),
    'access arguments' => array('access crm core donation page'),
    'file' => 'crm_core_donation.widget.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/crm/donation'] = array(
    'title' => 'Donation',
    'description' => 'Manage CRM Core Donation feature.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer crm core donation'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/crm/donation/config'] = array(
    'title' => 'Donation settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_donation_config'),
    'access arguments' => array('administer crm core donation'),
  );

  $items['crm/donations/%'] = array(
    'title' => 'Edit donation page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_donation_page_form', 2, FALSE),
    'access arguments' => array('administer crm core donation'),
    'file' => 'crm_core_donation.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['crm/donations/%/delete'] = array(
    'title' => 'Delete donation page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_donation_page_delete_form', 2),
    'access arguments' => array('administer crm core donation'),
    'file' => 'crm_core_donation.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['crm/donations/new'] = array(
    'title' => 'Create new donation page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_donation_page_form'),
    'access arguments' => array('administer crm core donation'),
    'file' => 'crm_core_donation.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight'	=> 10,
  );

  // personal donation page
  $items['user/%user/pdp/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'crm_core_donation_pdp',
    'page arguments' => array(1, 'edit'),
    'access arguments' => array('create crm core donation PDP'),
    'file' => 'crm_core_donation.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/pdp/view'] = array(
    'title' => 'My donation page',
    'page callback' => 'crm_core_donation_pdp',
    'page arguments' => array(1),
    'access arguments' => array('create crm core donation PDP'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['user/%user/pdp'] = array(
    'title' => 'My donation page',
    'page callback' => 'crm_core_donation_pdp',
    'page arguments' => array(1),
    'access arguments' => array('create crm core donation PDP'),
    'type' => MENU_LOCAL_TASK,
  );
  
  // add a tab menu item for the donations report
  // this will allow us to have a basic navigation around donation reports
  /*
  // Default hook for the donations overview reports.
  $items['crm/reports/donations'] = array(
    'title' => 'Donations Overview',
    'page callback' => 'views_page',
    'page arguments' => array('donations_overview_alt', 'page'),
    'access arguments' => array('View CRM Core Donation reports'),
    'file path' => drupal_get_path('module', 'views'),
    'file' => 'views.module'
  );
  */
  // Time / Day report
  $items['crm/reports/donations/time_and_day'] = array(
    'title' => 'Time and Day',
    'page callback' => 'crm_core_donation_time_of_day',
    'access arguments' => array('View CRM Core Donation reports'),
    'file' => 'crm_core_donation.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['crm/reports/donations-page/%/time_and_day'] = array(
    'title' => 'Time and Day',
    'page callback' => 'crm_core_donation_time_of_day',
    'page arguments' => array(3),
    'access arguments' => array('View CRM Core Donation reports'),
    'file' => 'crm_core_donation.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  
  /*
  // Donations overview
  $items['crm/reports/donations/overview'] = array(
    'title' => 'Overview',
    'page callback' => 'views_page',
    'page arguments' => array('donations_overview_alt', 'page'),
    'access arguments' => array('View CRM Core Donation reports'),
    'file path' => drupal_get_path('module', 'views'),
    'file' => 'views.module',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  
  $items['crm/reports/donations/%'] = array(
    'title' => 'Donations Overview',
    'page callback' => 'views_page',
    'page arguments' => array('donations_overview_alt', 'page', 3),
    'access arguments' => array('View CRM Core Donation reports'),
    'file path' => drupal_get_path('module', 'views'),
    'file' => 'views.module'
  );
  
  // Donations overview
  $items['crm/reports/donations/%/overview'] = array(
    'title' => 'Overview',
    'page callback' => 'views_page',
    'page arguments' => array('donations_overview_alt', 'page', 3),
    'access arguments' => array('View CRM Core Donation reports'),
    'file path' => drupal_get_path('module', 'views'),
    'file' => 'views.module',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Time / Day report
  $items['crm/reports/donations/%/time_and_day'] = array(
    'title' => 'Time and Day',
    'page callback' => 'crm_core_donation_time_of_day',
    'page arguments' => array(3),
    'access arguments' => array('View CRM Core Donation reports'),
    'file' => 'crm_core_donation.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  */
  
  return $items;
}






/**
 * Implements hook_permission().
 */
function crm_core_donation_permission() {
  return array(
    'administer crm core donation' => array(
      'title' => t('Administer CRM Core donation'),
      'description' => t('Administer CRM Core donation'),
    ),
    'view crm core donation reports' => array(
      'title' => t('View CRM Core Donation reports'),
      'description' => t('View reports related to donations and access widgets related to donations.'),
    ),
    'access crm core donation page' => array(
      'title' => t('Access donation pages'),
      'description' => t('Ability to access donation pages and make online donations'),
    ),
    'create crm core donation PDP' => array(
      'title' => t('Create personal donation pages (PDP)'),
      'description' => t('Ability to create personal donation pages'),
    ),
  );
}

/**
 * Implements hook_block_info
 */
function crm_core_donation_block_info() {
  $blocks = array();
  $blocks['donation_reports_chart'] = array(
    'info' => t('Charts for Donations'), 
    'cache' => DRUPAL_NO_CACHE, 
  );
  $blocks['donor_report_widget'] = array(
    'info' => t('CRM Core Donor Widget for Donor report page'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}
/**
 * Implements hook_block_view
 */
function crm_core_donation_block_view($delta = '') {
  switch($delta) {
    case 'donation_reports_chart':
      return _crm_core_donation_block_view_donation_reports_chart();
      break;
    case 'donor_report_widget':
      return _crm_core_donation_block_view_donor_report_widget();
      break;
  }

}

/**
 * Implements hook_theme().
 */
function crm_core_donation_theme() {
  return array(
    'crm_core_donation' => array(
      'render element' => 'form',
      //'function' => 'crm_core_donation_form_theme',
      'preprocess functions' => array('template_preprocess', 'crm_core_donation_form_theme_preprocess'),
      'template' => 'crm-core-donation',
    ),
  );
}

/*
 * Implements hook_commerce_line_item_type_info().
 */
function crm_core_donation_commerce_line_item_type_info() {

  $line_item_types['crm_core_donation'] = array(
    'name' => t('CRM Core Donation'),
    'description' => t('A CRM Core Donation'),
    'product' => FALSE,
    'add_form_submit_value' => t('Add donation'),
    'callbacks' => array(
      'configuration' => '_crm_core_donation_line_item_configuration',
      'title' => '_crm_core_donation_line_item_title',
      'add_form' => '_crm_core_donation_line_item_add_form',
      'add_form_submit' => '_crm_core_donation_line_item_add_form_submit',
    ),
  );

  return $line_item_types;
}


/**
 * Implements hook_crm_core_report_register
 */
function crm_core_donation_crm_core_report_register() {

  $reports = array(
    'donations' => array(
      'title'	  => t('Donations'),
      'reports'	=> array(
        'donations_overview'	=> array(
          'title'       => t('Donations Overview'),
          'path'        => 'crm/reports/donations/overview',
          'description'	=> t('Details on donations recorded in the system.'),
        ),
        'donations_time_of_day'	=> array(
          'title'       => t('Donations Time and Day'),
          'path'        => 'crm/reports/donations/time_and_day',
          'description'	=> t('Information about when donations are received.'),
        ),
        'donation_page'	=> array(
          'title'       => t('Donations Page Performance'),
          'path'        => 'crm/reports/donations/crm-core-donation-pages',
          'description'	=> t('Details on the performance of individual donation pages.'),
        ),
        
  		 'leaderboard'	  => array(
          'title'       => t('Leaderboard - Depreciated'),
          'path'        => 'crm/donations/leaderboard',
          'description'	=> t('Who is raising the most through their personal donation pages?'),
        ),
      ),
      'widgets'	=> array(),
    ),
    
    'donors' => array(
      'title'	  => t('Donors'),
      'reports'	=> array(
        'donor_overview'	=> array(
          'title'       => t('Donor Overview'),
          'path'        => 'crm/reports/donors/overview',
          'description'	=> t('List of donors.'),
        ),
        'donations_lybunt'	=> array(
          'title'       => t('LYBUNT'),
          'path'        => 'crm/reports/donors/lybunt',
          'description'	=> t('Last year but not this year report.'),
        ),
        'donations_sybunt'	=> array(
          'title'       => t('SYBUNT'),
          'path'        => 'crm/reports/donors/sybunt',
          'description'	=> t('Some year but not this year report.'),
        ),
      ),
      'widgets'	=> array(
      ),
    ),
    
  );

  return $reports;
}

/*
 * Implementation of hook_menu_alter
 * 
 * TODO: Move this into CRM Core Demo Settings
 * 
 */
function crm_core_donation_menu_alter(&$items) {
	
	// set the dashboard to a homebox preset
	$items['crm']['page callback'] = 'homebox_build';
	$items['crm']['page arguments'] = $items['crm/dashboard/hb']['page arguments'];

}

/**
 * Dispatch (callback) menu items for PDP
 *
 * @params
 *
 * (stdClass) $arg_user - $user object
 * (string) $render - edit/view
 *
 * @return
 *
 * A personal donation settings form
 * A personal donation page
 */
function crm_core_donation_pdp($arg_user, $render = 'view') {
  // check for PDP settings
  if (variable_get('crm_core_donation_pdp', 1) == 0) {
    return;
  }

  $crm_core_profile = variable_get('crm_core_donation_profile', '');
  if ($crm_core_profile != '') {
    module_load_include('inc', 'crm_core_profile', 'crm_core_profile.forms');
    $donation_profile = crm_core_profile_load($crm_core_profile);
    // load the PDP
    $data = array();
    $query = db_select('crm_core_donation_page', 'p')
    ->fields('p')
    ->condition('pdp', 1)
    ->condition('uid', $arg_user->uid);

    $result = $query->execute();
    $donation_page = $result->fetchAssoc();

    switch ($render) {
      case 'view':
      default:
        if (empty($donation_page)) {
          $link = l('click here', 'user/' . $arg_user->uid . '/pdp/settings');
          return '<div class="messages status">You have not created a personal donation page yet, ' . $link . ' to create it</div>';
        }
        $donation_profile['donation_page'] = $donation_page;
        return drupal_get_form('crm_core_profile_entry_form', $donation_profile);
      break;
      case 'edit':
        module_load_include('inc', 'crm_core_donation', 'crm_core_donation.pages');
        if (empty($donation_page)) {
          return drupal_get_form('crm_core_donation_page_form', NULL, TRUE);
        }
        return drupal_get_form('crm_core_donation_page_form', $donation_page['id'], TRUE);
      break;
    }
  }
  return drupal_access_denied();
}


/**
 * Page callback for system donation form
 *
 * @params
 * (int) $id    Donation page id
 *
 * @return
 * A fully rendered donation page or access denied
 */
function crm_core_donation_page_callback($id) {
  $crm_core_profile = variable_get('crm_core_donation_profile', '');
  if ($crm_core_profile != '') {
    module_load_include('inc', 'crm_core_profile', 'crm_core_profile.forms');
    $donation_profile = crm_core_profile_load($crm_core_profile);

    $donation_page = crm_core_donation_page_load($id);
    if (empty($donation_page)) {
      return drupal_access_denied();
    }

    if ($donation_page['status'] == 0) {
      return drupal_access_denied();
    }

    $donation_profile['donation_page'] = $donation_page;
    return drupal_get_form('crm_core_profile_entry_form', $donation_profile);
  }
  return drupal_access_denied();
}

/**
 * Configuration form
 */
function crm_core_donation_config($form, &$form_state) {

  $form['crm'] = array(
    '#type' => 'fieldset',
    '#title' => t('CRM Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $crm_core_profiles = crm_core_profile_load_all();
  $profile_options = array('' => t('--Select--'));
  foreach ($crm_core_profiles as $crm_core_profile) {
    $profile_options[$crm_core_profile['name']] = $crm_core_profile['label'];
  }

  // profile we will use to attach to the event
  $form['crm']['crm_core_donation_profile'] = array(
    '#type' => 'select',
    '#title' => 'Select the CRM Core profile to use for donations',
    '#options' => $profile_options,
    '#default_value' => variable_get('crm_core_donation_profile', ''),
    '#required' => TRUE,
  );

  // the billing address we need to map
  $profile_name = variable_get('crm_core_donation_profile', '');
  if ($profile_name != '') {

    $options = array('' => t('--select--'));
    $options = crm_core_donation_fields($profile_name);

    $form['crm']['crm_core_donation_billing_address'] = array(
      '#type' => 'select',
      '#title' => 'Billing address field',
      '#description' => t('Please choose the billing address field used'),
      '#options' => $options,
      '#default_value' => variable_get('crm_core_donation_billing_address', ''),
      '#required' => TRUE,
    );
  }

  $form['crm_core_donation_pdp'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable personal donation pages',
    '#default_value' => variable_get('crm_core_donation_pdp', 1),
  );

  $form['IMO'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dedication notification settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['IMO']['crm_core_donation_imo_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Dedication e-mail message'),
    '#description' => t('The message you would like to send to the person you are honoring or dedicating, the following replacement values are available: !donor_name, !dedicant_name, !dedication_type, !donation_amount.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#default_value' => variable_get('crm_core_donation_imo_message', '')
  );

  $form['crm_core_donation_redirect_message'] = array(
    '#type' => 'textarea',
    '#title' => 'redirect message',
    '#description' => 'When someone successfully makes a donation, this message will be shown',
    '#default_value' => variable_get('crm_core_donation_redirect_message', 'Thank you for your donation'),
  );

  return system_settings_form($form);
}

/*
 * Implements hook_crm_core_profile_save().
 *
 * Send IHO/IMO email.
 */
function crm_core_donation_crm_core_profile_save($profile, $form_state_values) {

  if ($profile['name'] != 'donation') {
    return;
  }

  $v = $form_state_values;
  $dedication_type = $v['activity']['field_donation_dedication_type'][LANGUAGE_NONE][0]['value'];
  if (!isset($dedication_type) || !$dedication_type) {
    return;
  }

  $dedicant_email = $v['activity']['field_donation_dedication_email'][LANGUAGE_NONE][0]['email'];
  if ( !isset($dedicant_email) || $dedicant_email == '') {
    return;
  }

  $type = '';
  switch ($dedication_type) {
    case 'IHO':
    default:
      $type = 'in honor of';
    break;
    case 'IMO':
      $type = 'in memory of';
    break;
    case 'OBO':
      $type = 'on behalf of';
    break;
  }

  $replacement = array(
    '!donor_name' => implode(' ', $v['contact_name'][LANGUAGE_NONE][0]),
    '!dedicant_name' => $v['activity']['field_donation_dedication_name'][LANGUAGE_NONE][0]['value'],
    '!dedication_type' => $type,
    '!donation_amount' => $v['activity']['field_donation_amounts'][LANGUAGE_NONE][0]['value'],
  );

    $params['subject'] = t('!dedicant_name has made a donation !dedication_type of you', $replacement);
    $params['body'] = t(variable_get('crm_core_donation_imo_message', ''), $replacement);
    $params['bcc'] = '';

    drupal_mail('crm_core_profile_notification', 'crm_core_profile_notification', $dedicant_email, LANGUAGE_NONE, $params, variable_get('site_mail', NULL), TRUE);
}

/**
 * load available fields from the contact
 */
function crm_core_donation_fields($profile_name) {
  $crm_core_profile = crm_core_profile_load($profile_name);
  $fields = $crm_core_profile['fields'];
  $data = array();
  foreach ($fields['toggle'] as $_field => $toggle) {
    if ($toggle !== 0) {
      // need to get the label for the field
      $info = field_info_instance('crm_core_contact', $_field, $crm_core_profile['bundle_type']);
      $data[$_field] = $info['label'];
    }
  }

  return $data;
}

/**
 * Theme preprocessing function
 */
function crm_core_donation_form_theme_preprocess(&$variables) {
  drupal_add_css(drupal_get_path('module', 'crm_core_donation') . '/crm_core_donation.css');
  drupal_add_js(drupal_get_path('module', 'crm_core_donation') . '/crm_core_donation.js');

  $form = $variables['form'];

  // load the profile and get the contact fields
  $crm_core_profile = crm_core_profile_load($form['profile_name']['#value']);
  $fields = $crm_core_profile['fields'];
  $contact_fields = array();
  foreach ($fields['toggle'] as $field_name => $toggle) {
    if ($toggle !== 0) {
      $contact_fields[] = $field_name;
    }
  }

  $variables['payment_method'] = drupal_render($form['payment_method']);

  $variables['message'] = drupal_render($form['message']);
  $variables['header'] = drupal_render($form['header']);
  //  $form['activity']['field_donation_amounts']['#access'] = FALSE;
  //  $form['activity']['field_donation_dedication_type']['#access'] = FALSE;
  //  $form['activity']['field_donation_dedication_name']['#access'] = FALSE;
  //  $form['activity']['field_donation_dedication_email']['#access'] = FALSE;
  $amount_field_set = array(
    '#type' => 'fieldset',
    '#title' => 'Donation amount',
    '#children' => drupal_render($form['activity']['field_donation_amounts']),
  );
  $variables['amount'] = drupal_render($amount_field_set);

  // dedication
  $dedication = drupal_render($form['activity']['field_donation_dedication_type']);
  // $dedication = drupal_render($form['field_donation_dedication_type']);
  $dedication .= '<div id="dedication_info">';
  $dedication .= drupal_render($form['activity']['field_donation_dedication_name']);
  // $dedication .= drupal_render($form['field_donation_dedication_name']);
  $dedication .= drupal_render($form['activity']['field_donation_dedication_email']);
  $dedication .= drupal_render($form['field_donation_dedication_email']);
  $dedication .= '</div>';

  $dedication_field_set = array(
    '#type' => 'fieldset',
    '#title' => 'Dedication',
    '#children' => $dedication,
  );

  $variables['dedication'] = drupal_render($dedication_field_set);

  // billing information
  $contact ='';
  if (!empty($contact_fields)) {
    foreach ($contact_fields as $field) {
      $contact .= drupal_render($form[$field]);
    }
  }

  $contact_field_set = array(
    '#type' => 'fieldset',
    '#title' => 'Billing Information',
    '#children' => $contact,
  );

  $variables['billing'] = drupal_render($contact_field_set);

  // payment information
  $payment_field_set = array(
    '#type' => 'fieldset',
    '#title' => 'Payment Information',
    '#children' => drupal_render($form['commerce_payment']),
  );

  $variables['payment'] = drupal_render($payment_field_set);

  // remains
  $variables['submit'] = drupal_render($form['submit']);
  $variables['footer'] = drupal_render($form['footer']);
  $variables['rest'] = drupal_render_children($form);

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crm_core_donation_form_crm_core_profile_entry_form_alter(&$form, &$form_state, $form_id) {
  // adding additional classes
  $profile = $form_state['profile'];

  // making sure we are on the correct profile
  if ($profile['name'] != variable_get('crm_core_donation_profile', '')) {
    return;
  }
  if (empty($form['#attributes']['class'])) {
    $form['#attributes']['class'] = array('crm_core_donation_form');
  }
  else {
    $form['#attributes']['class'] += array('crm_core_donation_form');
  }

  $donation_page = $profile['donation_page'];
  $form_state['donation_page'] = $donation_page;
  if ($donation_page['title'] != '') {
    drupal_set_title($donation_page['title']);
  }

  if ($donation_page['pdp'] == 1) {
    $user = menu_get_object('user');
    if (!empty($user)) {
      $form['message'] = array(
        '#prefix' => '<div class="messages warning">',
        '#suffix' => '</div>',
        '#markup' => 'You can view your live donation page ' . l('here', 'donation_pages/' . $donation_page['id']),
      );
    }
  }

  $header = unserialize($donation_page['header']);
  $footer = unserialize($donation_page['footer']);
  $form['header'] = array(
    '#markup' => $header['value'],
  );

  $form['footer'] = array(
    '#markup' => $footer['value'],
  );
  
  	
	// set campaign (the donation page id)	
	$form['activity']['field_donation_campaign'][LANGUAGE_NONE][0]['value']['#default_value'] = $donation_page['id'];

	// todo, use commerce's currency management
	setlocale(LC_MONETARY, 'en_US');

	$donation_amounts = array();
	if (isset($donation_page['amounts'])) {
  	$_amounts = unserialize($donation_page['amounts']);
  	if (!empty($_amounts)) {
    	foreach($_amounts as $amount) {
      	$donation_amounts[$amount] = money_format('%(#2n', $amount);
    	}
  	}
	} else {
  	$donation_amounts = array(
  	 10 => money_format('%(#2n', 10),
  	 20 => money_format('%(#2n', 20),
  	 50 => money_format('%(#2n', 50),
  	 100 => money_format('%(#2n', 100),
  	);
	}

	// set the amount widget to our options
	$form['activity']['field_donation_amounts'][LANGUAGE_NONE][0]['value']['#type'] = 'radios';
	$form['activity']['field_donation_amounts'][LANGUAGE_NONE][0]['value']['#options'] = $donation_amounts;
	
  // preset an amount on the donation form according to get
  if (isset($form['activity']['field_donation_amounts'][LANGUAGE_NONE]['#options'])) {
    $amount_set = array_keys($form['activity']['field_donation_amounts'][LANGUAGE_NONE]['#options']);
    if (isset($_GET['amount'])) {
      if (in_array($_GET['amount'], $amount_set)) {
          $form['activity']['field_donation_amounts'][LANGUAGE_NONE]['#default_value']['value'] = check_plain($_GET['amount']);
      }
    }
  }



  // set amount
//  $amounts = unserialize($donation_page['amounts']);
//  if ($amounts != '') {
//     $_amounts = nl2br($amounts);
//     $_amounts = explode('<br />', $_amounts);
//     foreach($_amounts as $_amount) {
//       $_amount_options[(int)$_amount] = '$' . $_amount; //t('$%amount', array('%amount' => $_amount));
//     }
//     $form['activity']['field_donation_amounts'][LANGUAGE_NONE]['#default_value']['value'] = $_amounts[0];
//     $form['activity']['field_donation_amounts'][LANGUAGE_NONE]['#options'] = $_amount_options;
//  }

  $checkout_pane = commerce_checkout_panes(array('pane_id' => 'commerce_payment'));
  $checkout_pane = array_pop($checkout_pane);

  $form_state['checkout_pane'] = $checkout_pane;

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.checkout_pane');

  //attach an order if it was not attached before
  if (!isset($form_state['order'])) {
    global $user;
    $order = commerce_order_new($user->uid, 'checkout_checkout');
    // attach some data to order obj so we can recognize the order as a related to crm_core_donation
    $order->data['crm_core_donation']['donation_page']['id'] = $form_state['profile']['donation_page']['id'];
    $form_state['order'] = $order;
  }
  else {
    $order = $form_state['order'];
  }

  // set default payment method for the donation page
  $data = unserialize($donation_page['data']);
  if (!empty($data)) {
    if (array_key_exists('payment_method', $data)) {
      if ($data['payment_method'] != '') {
        // detect the payment method and display some notification to the user
        $payment = explode('|', $data['payment_method']);
        if ($payment[0] == 'commerce_payment_example') {
          $link = l('click here', 'admin/commerce/config/payment-methods');
          $form['payment_method'] = array(
            '#markup' => "Currently the donation page is using an example payment method, please {$link} to set up.",
            '#prefix' => '<div class="messages warning">',
            '#suffix' => '</div>',
          );
        }
        $order->data['payment_method'] = $data['payment_method'];
      }
    }
  }

  $form['commerce_payment'] = commerce_payment_pane_checkout_form($form, $form_state, $checkout_pane, $order);

  $form['commerce_payment']['#tree'] = TRUE;

  $form['submit']['#value'] = t('donate');

  $form['#theme'] = 'crm_core_donation';
  $form['#validate'][] = 'crm_core_donation_form_validate';
  $form['#submit'][] = 'crm_core_donation_form_submit';

}


function crm_core_donation_form_validate($form, &$form_state) {
	
	// set campaign id to the activity
	// $form_state['activity']->field_donation_campaign[LANGUAGE_NONE][0]['value'] = $form_state['profile']['donation_page']['id'];

  // save an order if it was not saved before
  if (!empty($form_state['order']->order_id)) {
    $order = $form_state['order'];
  }
  else {
    $order = $form_state['order'];
    commerce_order_save($order);
  }

  // renew lineitems if amount is set
  if (isset($form_state['values']['field_donation_amounts'])) {
    $amount = $form_state['values']['field_donation_amounts'][LANGUAGE_NONE][0]['value'] * 100;
  }
  elseif (isset($form_state['values']['activity']['field_donation_amounts'])) {
    $amount = $form_state['values']['activity']['field_donation_amounts'][LANGUAGE_NONE][0]['value'] * 100;
  }
  if (!empty($amount)) {
    // delete all line items from the order that accidentally trap to order
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $old_line_items_ids = array();
    foreach ($order_wrapper->commerce_line_items as $item) {
      $value = $item->value();
      if (!empty($value)) {
        $old_line_items_ids[] = $value->line_item_id;
      }
    }
    commerce_line_item_delete_multiple($old_line_items_ids);
    unset($order->commerce_line_items);
    commerce_order_save($order);

    // create and attach a new one line item
    $line_item = _crm_core_donation_line_item_new($amount, $order->order_id);
    commerce_line_item_save($line_item);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->commerce_line_items[] = $line_item;
    commerce_order_save($order);
  }

  $form_state['order'] = $order;

  // call payment method validator
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.checkout_pane');
  return commerce_payment_pane_checkout_form_validate($form, $form_state, $form_state['checkout_pane'], $order);
}

function crm_core_donation_form_submit($form, &$form_state) {

  if (isset($form_state['values']['commerce_payment']['payment_details']['credit_card'])) {
    $credit_card = $form_state['values']['commerce_payment']['payment_details']['credit_card'];
  }

  // attach to order contact, donation page and activity id's
  $form_state['order']->data['crm_core_donation']['contact']['contact_id'] = $form_state['contact']->contact_id;
  $form_state['order']->data['crm_core_donation']['donation_page_submission_activity']['activity_id'] =
  $form_state['activity']->activity_id;
  $order = $form_state['order'];

  // create and attach commerce_customer profile to an order
  _crm_core_donation_commerce_attach_profile($order, $form_state);

  // fill a created activity with a values
  $activity_id = $form_state['activity']->activity_id;
  $activity = crm_core_activity_load($activity_id);
  
  // add last 4 cc
  if (isset($credit_card)) {
    $activity->field_donation_cc_last4[LANGUAGE_NONE][0]['value'] = trim(drupal_substr(trim($credit_card['number']), -4));
  }
  // set order reference back to the activity
  $activity->field_donation_order[LANGUAGE_NONE][0]['target_id'] = $order->order_id;
  $activity->field_donation_order[LANGUAGE_NONE][0]['target_type'] = 'commerce_order';
  // populate activity participants field
  $activity->field_activity_participants[LANGUAGE_NONE][0]['target_id'] = $form_state['contact']->contact_id;
  $activity->field_activity_participants[LANGUAGE_NONE][0]['target_type'] = 'crm_core_contact';

  $recurring_payment_method = $form_state['values']['commerce_payment']['payment_method'] == 'authnet_arb|commerce_payment_authnet_arb';

  // call a payment method
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.checkout_pane');
  commerce_payment_pane_checkout_form_submit($form, $form_state, $form_state['checkout_pane'], $order);

  $form_state['order'] = $order;

  if ($form_state['rebuild'] == FALSE) {
    // save an order and update the order status to completed because the order has been processed
    if (!$recurring_payment_method) {
      commerce_order_status_update($order, 'checkout_complete');
    }

    // set an activity status
    if ($recurring_payment_method) {
      $activity->field_donation_status[LANGUAGE_NONE][0]['value'] = 'refund';
    }
    else {
      $activity->field_donation_status[LANGUAGE_NONE][0]['value'] = 'complete';
    }
    // show the message and redirect
    $form_state['redirect'] = $form_state['donation_page']['redirect'];
    drupal_set_message(variable_get('crm_core_donation_redirect_message', 'Thank you for your donation'));
  }
  else {
    // set a declined activity status
    $activity->field_donation_status[LANGUAGE_NONE][0]['value'] = 'declined';
  }

  $form_state['order'] = $order;
  commerce_order_save($order);
  crm_core_activity_save($activity);

}

/**
 * Create/Save a commerce_order
 */
function _crm_core_donation_commerce_order_save($amount, $user) {

 // Create the new order in checkout; you might also check first to
  // see if your user already has an order to use instead of a new one.
  $order = commerce_order_new($user->uid, 'checkout_checkout');

  commerce_order_save($order);

  $line_item = _crm_core_donation_line_item_new($amount, $order->order_id);

  commerce_line_item_save($line_item);

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->commerce_line_items[] = $line_item;

  commerce_order_save($order);

  return $order;
}

/**
 * Create a new custom line item
 */
function _crm_core_donation_line_item_new($amount, $order_id = 0, $currency_code = 'USD') {
  $type = 'crm_core_donation';

  // Create the new line item.
  $line_item = entity_create('commerce_line_item', array(
    'type' => $type,
    'order_id' => $order_id,
    'quantity' => 1,
  ));

  $line_item->commerce_unit_price = array(
    LANGUAGE_NONE => array(
      '0' => array(
        'amount' => $amount,
        'currency_code' => $currency_code,
      ),
    )
  );

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  if (!is_null($line_item_wrapper->commerce_unit_price->value())) {
    if (!commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), 'base_price')) {
      $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
        $line_item_wrapper->commerce_unit_price->value(),
        'base_price',
        $line_item_wrapper->commerce_unit_price->value(),
        TRUE
      );
    }
  }
  // Return the line item.
  return $line_item;
}

function _crm_core_donation_line_item_configuration($line_item_type) {
  $type = $line_item_type['type'];
}

function _crm_core_donation_line_item_title($line_item) {
  return t('Donation');
}

function _crm_core_donation_line_item_add_form($element, &$form_state) {
  $form = array();
  return $form;
}

function _crm_core_donation_line_item_add_form_submit(&$line_item, $element, &$form_state, $form) {
  $line_item->line_item_label = t('Donation');
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  // Provide a default price.
  $amount = 10;
  $currency_code = 'USD';

  $line_item->commerce_unit_price = array('und' => array(
    '0' => array(
      'amount' => $amount,
      'currency_code' => $currency_code)
  ));

  if (!is_null($line_item_wrapper->commerce_unit_price->value())) {
    // Add the base price to the components array.
    if (!commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), 'base_price')) {
      $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
        $line_item_wrapper->commerce_unit_price->value(),
        'base_price',
        $line_item_wrapper->commerce_unit_price->value(),
        TRUE
      );
    }
  }
}

/**
 * Creates a commerce_customer profile and attach it to the passed order object
 *
 * @param object order
 *   a commerce order object
 *
 * @param array form_state
 *   a form_state array of crm_core_donation_form form
 *
 * @return object profile
 *   returns created profile object or FALSE
 */
function _crm_core_donation_commerce_attach_profile(&$order, $form_state) {
  // ToDo: both commerce_profile and activity are fieldable entities,
  //   so this code have be revorked to support configured fields.
  // But because we don't know the mapping, the current hardcoded solution is
  //   probably the best on this point.
  // Seems like we have a question to arhitecture here, how to sync commerce profiles and activities.

  // hardcoded profile name we are using here
  $profile_type = 'billing';

  $profile_info = commerce_customer_profile_type_load($profile_type);
  if (empty($profile_info)) {
    return FALSE;
  }

  // create a new profile, fill it with values and save
  $profile = commerce_customer_profile_new($profile_info['type'], $order->uid);
  $profile->entity_context = array(
    'entity_type' => 'commerce_order',
    'entity_id' => $order->order_id,
  );
  $profile->status = TRUE;
  $profile->uid = $order->uid;
  if ($profile_info['addressfield']) {
    $billing_address_field = variable_get('crm_core_donation_billing_address', '');
    $address = $form_state['values'][$billing_address_field][LANGUAGE_NONE][0];
    $profile->commerce_customer_address[LANGUAGE_NONE][0] = $address;
  }
  $contact_name = (empty($form_state['values']['contact_name'][LANGUAGE_NONE][0]['safe'])) ?
    $form_state['values']['contact_name'][LANGUAGE_NONE][0]
    : $form_state['values']['contact_name'][LANGUAGE_NONE][0]['safe'];
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'] = implode(' ', $contact_name);
  commerce_customer_profile_save($profile);

  // attach created profile to order using a entity_wrapper
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->{$profile_info['module'] . '_' . $profile_type} = $profile;

  return $profile;
}

/*
 * Implement a hook_authnet_arb_silentpost
 */
function crm_core_donation_authnet_arb_silentpost($post) {

  // init some variables
  $order_id = $post['x_po_num'];
  $order = commerce_order_load($order_id);
  $donation_page_submission_activity = crm_core_activity_load(
    $order->data['crm_core_donation']['donation_page_submission_activity']['activity_id']);

  if ($donation_page_submission_activity->type != 'donation') {
    return;
  }

  $amount = $post['x_amount']*100;
  $card_4cc = drupal_substr($post['x_account_number'], -4);
  $responce_code = $post['x_response_code'];

  // create a new activity
  // *** Create and save an activity ***
  module_load_include('inc', 'crm_core_donation', 'crm_core_donation.pages');
  $donation_page = crm_core_donation_page_load($order->data['crm_core_donation']['donation_page']['id']);
  $activity = array('type' => 'donation', 'title' => $donation_page['name']);
  $activity = crm_core_activity_create($activity);
  // populate activity fields with values from attached to order profile
  $crm_core_profile = variable_get('crm_core_donation_profile', '');
  $donation_activity_profile = crm_core_profile_activity_load($crm_core_profile);
  $donation_activity_profile_fields = $donation_activity_profile['fields'];
  $activity_fields_to_copy = array_filter($donation_activity_profile_fields['toggle']);

  foreach ($activity_fields_to_copy as $fieldname) {
    $activity->{$fieldname} = $donation_page_submission_activity->{$fieldname};
  }
  // populate activity participants field
  $activity->field_activity_participants[LANGUAGE_NONE][0]['target_id'] =
    $order->data['crm_core_donation']['contact']['contact_id'];
  $activity->field_activity_participants[LANGUAGE_NONE][0]['target_type'] = 'crm_core_contact';
  // populate activity order field
  $activity->field_donation_order[LANGUAGE_NONE][0]['target_id'] = $order->order_id;
  $activity->field_donation_order[LANGUAGE_NONE][0]['target_type'] = 'commerce_order';
  // populate activity last 4 cc field
  $activity->field_donation_cc_last4[LANGUAGE_NONE][0]['value'] = $card_4cc;
  // populate activity uid field
  global $user;
  $activity->uid =  $user->uid;
  // populate donation_campaign field
  $activity->field_donation_campaign[LANGUAGE_NONE][0]['value'] = $order->data['crm_core_donation']['donation_page']['id'];


  if ($responce_code == 1) {
    // if the recurring transaction was success

    // *** add a new one another line item to the order
    $order = commerce_order_load($order_id);
    $line_item = _crm_core_donation_line_item_new($amount, $order_id);
    commerce_line_item_save($line_item);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->commerce_line_items[] = $line_item;
    commerce_order_save($order);

    // set an activity status to 'complete'
    $activity->field_donation_status[LANGUAGE_NONE][0]['value'] = 'complete';
  }
  else {
    // set an activity status to 'declined'
    $activity->field_donation_status[LANGUAGE_NONE][0]['value'] = 'declined';
  }

  // save an activity
  crm_core_activity_save($activity);

}

/**
 * Theming function for the main donation form
 * @todo: this will have to be converted to a preprocess function so we can use template
 * @depcreated: using a template right now
 */
function crm_core_donation_form_theme($variables) {

  $form = $variables['form'];
  // load the profile and get the contact fields
  $crm_core_profile = crm_core_profile_load($form['profile_name']['#value']);
  $fields = $crm_core_profile['fields'];
  $contact_fields = array();
  foreach ($fields['toggle'] as $field_name => $toggle) {
    if ($toggle !== 0) {
      $contact_fields[] = $field_name;
    }
  }
  $output = '';

  $output .= drupal_render($form['message']);

  $output .= '<div id="donation_header">';
  $output .= drupal_render($form['header']);
  $output .= '</div>';

  // amounts
  $output .= '<div id="amounts">';

  $amount_field_set = array(
    '#type' => 'fieldset',
    '#title' => 'Donation amount',
    '#children' => drupal_render($form['activity']['field_donation_amounts']),
  );

  $output .= drupal_render($amount_field_set);

  $output .= '</div>';

  // dedication
  $output .= '<div id="dedication">';
  $dedication = drupal_render($form['activity']['field_donation_dedication_type']);

  $dedication .= '<div id="dedication_info">';
  $dedication .= drupal_render($form['activity']['field_donation_dedication_name']);
  $dedication .= drupal_render($form['activity']['field_donation_dedication_email']);
  $dedication .= '</div>';

  $dedication_field_set = array(
    '#type' => 'fieldset',
    '#title' => 'Dedication',
    '#children' => $dedication,
  );

  $output .= drupal_render($dedication_field_set);

  $output .= '</div>';

  // contact information
  $output .= '<div id="billing">';
  $contact ='';
  if (!empty($contact_fields)) {
    foreach ($contact_fields as $field) {
      $contact .= drupal_render($form[$field]);
    }
  }

  $contact_field_set = array(
    '#type' => 'fieldset',
    '#title' => 'Billing Information',
    '#children' => $contact,
  );

  $output .= drupal_render($contact_field_set);

  $output .= '</div>';

  // payment information
  $output .= '<div id="payment">';
  $output .= drupal_render($form['payment']);
  $output .= '</div>';

  $output .= drupal_render($form['submit']);

  $output .= '<div id="donation_footer">';
  $output .= drupal_render($form['footer']);
  $output .= '</div>';

  // $output .= drupal_render($form['submit']);
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Implements hook_views_data().
 */
/**
 * Implements hook_views_data().
 */
function crm_core_donation_views_data() {
  $data = array();

  $data['crm_core_donation_page']['table']['group'] = t('CRM Donation');
  $data['crm_core_donation_page']['table']['base'] = array(
    'field' => 'id',
    'title' => t('CRM Core Donation Page'),
    'help' => t('The donation page'),
  );

  $data['crm_core_donation_page']['id'] = array(
    'title' => t('Donation page ID'),
    'help' => t('The unqiue internal identifier for a donation page'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );
 
  $data['crm_core_donation_page']['title'] = array(
    'title' => t('Donation page title'),
    'help' => t('Title of the donation page'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  $data['crm_core_donation_page']['path'] = array(
    'title' => t('Path'),
    'help' => t('The site path to the donation page'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  $data['crm_core_donation_page']['header'] = array(
    'title' => t('Header'),
    'help' => t('The donation page header message'),
    'field' => array(
      'handler' => 'views_handler_field_text_format',
      'click sortable' => FALSE,
    ),
  );

  $data['crm_core_donation_page']['status'] = array(
    'title' => t('Status'),
    'help' => t('Status of a donation page'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );

  $data['crm_core_donation_page']['uid'] = array(
    'title' => t('Donation Page Owner'),
    'help' => t('User UID of the donation page owner'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric.inc',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
   'relationship' => array(
      'handler' => 'views_handler_relationship',
      'base' => 'users',
      'field' => 'uid',
      'label' => t('Donation page creator'),
    ),
  );

  $data['crm_core_donation_page']['pdp'] = array(
    'title' => t('Personal donation page'),
    'help' => t('If this is a personal donation page'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );


  $data['crm_core_donation_page']['created'] = array(
    'title' => t('Created date'),
    'help' => t('The date the donation page was created'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  // Building a relationship handler to connect activity to a donation page
  $data['crm_core_activity']['table']['join'] = array(
   'field_data_field_donation_campaign' => array(
     'left_field' => 'activity_id', 
     'field' => 'entity_id',
   ),
  );
  $data['field_data_field_donation_campaign']['table']['join'] = array(
   'crm_core_donation_page' => array(
     'left_field' => 'field_donation_campaign_value', 
     'field' => 'id',
   ),
 );

  // defining relationship to donation campaign table
  // can be used to find the real name of a donation form
  $data['field_data_field_donation_campaign']['table']['group'] = t('Donation Campaign Table');
  
  $data['field_data_field_donation_campaign']['table']['base'] = array(
    'field' => 'entity_id', // This is the identifier field for the view.
    'title' => t('Donation Campaign Table'),
    'help' => t('Contains information about the source of donations received in the system.'),
    'weight' => -10,
  );
  

    
  return $data;
}

/**
 * Implements hook_views_data_alter
 */
function crm_core_donation_views_data_alter(&$data) {

  // Activity id field
  // To avoid issue with multiple titles passed into the views data (because this is also
  // ddelcared by the entity api views integration
  $data['field_data_field_donation_campaign']['field_donation_campaign_value'] = array(
    'title' => t('Donation campaign'),
    'help' => t('The source campaign of a donation.'),
    'relationship' => array(
      'base' => 'crm_core_donation_page', // The name of the table to join with.
      'base field' => 'id', // The name of the field on the joined table.
      'handler' => 'views_handler_relationship',
      'label' => t('CRM Core Donation Source Field'),
      'title' => t('CRM Core Donation Source Field'),
      'help' => t('Reference to the CRM Core Donation page data'),
    ),
  );
}

/**
 * Implementation of hook_preprocess_views_pre_render
 * 
 * This function is used as a preprocessing function for views
 * within the theme. Each time a view is loaded, it directs 
 * traffic to the appropriate preprocessing function.
 * 
 */
function crm_core_donation_views_pre_render(&$view) {
  
	// check to see if the view has a name. if so, look for
	// a correlate function in the theme that can be loaded
	// to preprocess variables within the view
	if (isset($view->name)) {
		$function = 'crm_core_donation_preprocess_views_view__'.$view->name;
		if (function_exists($function)) {
		  $function($view);
		}
	}
	
}

/**
 * Hack to deal with issues with views grouping around specific hours of the day
 * and for dealing with day of the week grouping issues
 */

function crm_core_donation_preprocess_views_view__crm_core_donations_time_of_day_report($view){
  
  // this is used when we are displaying time of day values
  if($view->current_display == 'page'){
    // this function goes through the values returned by the time of day report and groups them by hour
    // if there are no results, we don't need to do anything
    if(sizeof($view->result) > 0){
      
      // store new results here
      $new_results = array();
      
      // create this so we have an exact copy of a record, don't want to mess up views
      $result = clone $view;
      
      // get the timestamp for today at midnight
      $time = strtotime("today midnight");
      
      // create a sample record, it will be an exact duplicate of any values returned from views
      // in order to make sure we don't break anything
      $sample = $result->result[0];
      $sample->crm_core_activity_created = $time; // set the number of donations to 0
      $sample->activity_id = 0; // set the number of donations to 0
      $sample->field_field_donation_amounts[0]['rendered']['#markup'] = 0; // set the amount of donations to 0
      
      // loop around this array to get all hours of the day
      $times = array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23); // hours of the day
      
      // create a new result for each hour of the day
      // this will give us a fake set of results to populate with values from the real one
      foreach ($times as $item){
        $new_results[$item] = clone $sample;
        $new_results[$item]->crm_core_activity_created = $time+(60*60*$item);
      }
      
      // now, go through each result and get the real value
      // to pass back to views
      foreach ($result->result as $item => $value){
        $hour = date('G', $result->result[$item]->crm_core_activity_created);
        $new_results[$hour]->field_field_donation_amounts[0]['rendered']['#markup'] += $result->result[$item]->field_field_donation_amounts[0]['rendered']['#markup']; // set the amount of donations to 0        
        $new_results[$hour]->activity_id += $result->result[$item]->activity_id; // set the number of donations to 0
      }
      
      // set the new results to display with the view
      // this should be a complete list of when donations are received, by time of day
      $view->result = $new_results;
    }
    
  }
  
  // this function modifies days of the week views
  if($view->current_display == 'page_1'){
    
    // store new results here, to replace the ones coming out of the view
    $new_results = array();
    
    // create this so we have an exact copy of a record, don't want to mess up views
    $result = clone $view;
    
    // days of the week
    $days = array(t('Sunday'), t('Monday'), t('Tuesday'), t('Wednesday'), t('Thursday'), t('Friday'), t('Saturday'));
    
    // create a fake date to use for setting date values
    // this might not work correctly for timezones outside north america
    // TODO: put in a representational date based on someone's time zone
    $fake_date = strtotime("10 September 2000");
    
    // create a sample record, it will be an exact duplicate of any values returned from views
    // in order to make sure we don't break anything
    
    $sample = $result->result[0];
    // $sample->crm_core_activity_created = $time; // set the number of donations to 0
    $sample->activity_id = 0; // set the number of donations to 0
    $sample->field_field_donation_amounts[0]['rendered']['#markup'] = 0; // set the amount of donations to 0
    
    // we need to set each result to a common value
    // loop around the days array, create a set of new results corresponding to each day
    foreach ($days as $item => $val){
      $new_results[] = clone $sample;
      $new_results[$item]->crm_core_activity_created = $fake_date + (60*60*24*$item);
    }
    
    // for each result
    foreach ($result->result as $item => $value){
      
      // get the day of the week from the results, and find it's record based on the ordinal position in $days
      $check = array_search(date('l',$value->crm_core_activity_created), $days);
      
      // add in the totals
      // add in the number of donations
      $new_results[$check]->field_field_donation_amounts[0]['rendered']['#markup'] += $result->result[$item]->field_field_donation_amounts[0]['rendered']['#markup']; // set the amount of donations to 0        
      $new_results[$check]->activity_id += $result->result[$item]->activity_id; // set the number of donations to 0
    }
    
    // set the new results to display with the view
    // this should be a complete list of days and the number of donations / total amount of donations received
    $view->result = $new_results;
    
  }
  
}


/**
 * Hack to deal with views grouping issue for dates.
 */
function crm_core_donation_preprocess_views_view__crm_core_donations_chart($view){
  
  if($view->current_display == 'page_1'){
    
    // this normalizes all timestamps to the day they occur, removing the time element
    // and allowing the chart to group them properly
    foreach ($view->result as $item => $value){
      $existing_date = date('Y-m-d',$view->result[$item]->crm_core_activity_created);
      $new_date = new DateTime($existing_date, new DateTimeZone(variable_get('date_default_timezone', 0)));
      $view->result[$item]->crm_core_activity_created = date_timestamp_get($new_date);
    }
  
    // all results should be set to a specific date at this point.
    // now, loop through the results to find any duplicates. we are going to make them into a single point.
    $tmp = array(); // used to track timestamps
    
    foreach ($view->result as $item => $value){
      if(isset($tmp[$view->result[$item]->crm_core_activity_created])){
        $view->result[$tmp[$view->result[$item]->crm_core_activity_created]]->activity_id_sum += $view->result[$item]->activity_id_sum;
        unset($view->result[$item]);
      } else {
        $tmp[$view->result[$item]->crm_core_activity_created] = $item;
      }
    }
    
    // now, set days in between to display 0 donations
    // this is done by calculating the number of days between each result
    // adding the appropriate number of records between each
    // and returning a new results array to views
    
    $new_results = array(); // new array of results
    $last_result = ''; // the last result, used to figure out the difference between dates
    $counter = 0; // used to count actual placement of values
    
    foreach ($view->result as $item => $value){
      
      // start by priming the array
      if($last_result == ''){
        $last_result = clone $view->result[$item];
        $new_results[$counter] = clone $view->result[$item];
      } else {
        // we already have some results in the array, and we are interested in calculating the difference in dates
        // first, get the current timestamp
        $current = $view->result[$item]->crm_core_activity_created;
        $diff = $current - $last_result->crm_core_activity_created;
        $days = floor($diff/(60*60*24))-1;
        
        // insert the equivalent number of days
        // then add the current item
        for ($i = 0; $i < $days; $i++){
          $new_results[$counter] = clone $new_results[$counter-1];
          $new_results[$counter]->activity_id += $counter + $i;
          $new_results[$counter]->activity_id_sum = 0;
          $new_results[$counter]->crm_core_activity_created += (60*60*24);
          $counter++;
        }
        $last_result = clone $view->result[$item];
        $new_results[$counter] = clone $view->result[$item];
      }
      $counter++;
    }  
    $view->result = $new_results;
    
  }

  
  
}

/**
 * hook_form_FORM_ID_alter implementation
 * alter views_exposed_form form
 */
function crm_core_donation_form_views_exposed_form_alter (&$form , &$form_state) {
  if ($form['#id'] == 'views-exposed-form-donations-overview-alt-page'
  || $form['#id'] == 'views-exposed-form-donations-overview-alt-page-2') {
    $form['field_activity_date_value']['min']['#title'] = '';
    $form['field_activity_date_value']['min']['#size'] = 20;
    $form['field_activity_date_value']['max']['#title'] = t('And');
    $form['field_activity_date_value']['max']['#size'] = 20;

    $form['field_donation_amounts_value']['max']['#title'] = t('And');
    $form['field_donation_amounts_value']['max']['#size'] = 20;
    $form['field_donation_amounts_value']['min']['#size'] = 20;
  }
}

/**
 * Implements hook_views_query_alter().
 */
function crm_core_donation_views_query_alter(&$view, &$query) {
  if ($view->name == 'crm_core_donation_sybunt_report') {
    // Let's construct another where clause component
    $count = 1;
    $tz = new DateTimeZone(variable_get('date_default_timezone', 'America/New_York'));
    $current_time = new DateTime('now', $tz);
    $tz_offset   = $tz->getOffset($current_time);
    $field = "DATE_FORMAT(ADDTIME(field_activity_participants_crm_core_contact__field_data_field_donation_receive_date.field_donation_receive_date_value, SEC_TO_TIME(" . $tz_offset . ")), '%Y-%m-%d') NOT BETWEEN :prev_year AND :current_time";
    $prev_year = new DateTime('now', $tz);
    $value = array(
      ':prev_year'    => $prev_year->modify('-1 year')->format('Y-m-d'),
      ':current_time' => $current_time->format('Y-m-d'),
    );
    $query->where[$count]['conditions'][] = array(
      'field' => $field,
      'value' => $value,
      'operator' => 'formula',
    );
    dpm($query);
  }
}


function _crm_core_donation_block_view_donation_reports_chart() {
  $block['subject'] = '';
  $block['content'] = '';
  $view = views_get_page_view();
  if($view != ''){
    $view = clone views_get_page_view();
  } else {
    return;
  }
  if($view->name == 'donations_overview_alt'){
    $check = _flot_get_library_path();
    drupal_add_js($check . '/jquery.flot.resize.js', array('weight' => 20));
    // first, make sure we are including the resizable library
    // it's important
    drupal_add_library('flot', 'jquery.flot.resize.js');
    // this normalizes all timestamps to the day they occur, removing the time element
    // and allowing the chart to group them properly
    foreach ($view->result as $item => $value){
      $existing_date = date('Y-m-d',$view->result[$item]->crm_core_activity_created);
      $new_date = new DateTime($existing_date, new DateTimeZone(variable_get('date_default_timezone', 0)));
      $view->result[$item]->crm_core_activity_created = $new_date->format('U');
    }
    // all results should be set to a specific date at this point.
    // now, loop through the results to find any duplicates. we are going to make them into a single point.
    $tmp = array(); // used to track timestamps
    foreach ($view->result as $item => $value){
      if(isset($tmp[$view->result[$item]->crm_core_activity_created])){
        $tmp[$view->result[$item]->crm_core_activity_created] += $view->result[$item]->field_field_donation_amounts[0]['rendered']['#markup'];
      } else {
        $tmp[$view->result[$item]->crm_core_activity_created] = $view->result[$item]->field_field_donation_amounts[0]['rendered']['#markup'];
      }
    }
    // add the dates between each value, set them to 0
    $new_results = array(); // new array of results
    $last_result = ''; // the last result, used to figure out the difference between dates
    $counter = 0; // used to count actual placement of values
    foreach ($tmp as $item => $value){
      // start by priming the array
      if($last_result == ''){
        $last_result = $item;
        $new_results[$counter] = array(
          'date' => $item,
          'val' => $value,
        );
      } else {
        // we already have some results in the array, and we are interested in calculating the difference in dates
        // first, get the current timestamp
        $current = array('date' => $item, 'val' => $value);
        $diff = $last_result - $current['date'];
        $days = floor($diff/(60*60*24));
        if($days > 1){
          // add a zero value for the next day
          // and for the next day * days
          $new_results[$counter] = array(
            'date' => $last_result - 60*60*24, // adds a day
            'val'	=> 0
          );
          $counter++;
          $new_results[$counter] = array(
            'date' => $last_result - ($days-1)*60*60*24, // adds a day
            'val'	=> 0
          );
          $counter++;
        }
        $last_result = $item;
        $new_results[$counter] = $current;
      }
      $counter++;
    }
    // now, loop through and add the data
    $dat = array();
    foreach ($new_results as $idx => $val){
      $dat[] = array($val['date']*1000, $val['val']);
    }
    // if there is only one result being returned, add some dates before and after to make it look nice
    if(sizeof($dat) == 1){
      $first = $dat[0];
      $last = $dat[sizeof($dat)-1];
      $first[0] = $first[0]+(60*60*24*1000);
      $first[1] = 0;
      $last[0] = $last[0]-(60*60*24*1000);
      $last[1] = 0;
      array_unshift($dat, $first);
      array_push($dat, $last);
    }
    $d1 = new flotData($dat);
    $d1->label = t('Totals, in Dollars');
    $d1->mode = 'time';
    $d1->color = '#85de25';
    $d1->lines = new flotLine(array('lineWidth' => 5));
    // We can add points to these lines by setting the points property.
    $d1->points = new flotPoint(array('radius' => 5));
    // Set the variables array and pass it to theme('flot_graph').
    $variables = array(
      'data' => array($d1),
      'element' => array(
        'id' => 'crm-core-chart',
        'class' => 'crm-core-donations-flot',
        'style' => "width:100%;height:200px",
      ),
      'options' => array(
        'xaxis' => array(
          'mode'	=> 'time',
          'timeformat' => "%m/%d/%y",
        ),
        'grid' => array(
          'hoverable' => TRUE,
        ),
      ),
      'legend' => FALSE,
      'zoom' => FALSE,
    );
    $block['content'] = theme('flot_graph', $variables);
  }
  return $block;
}

function _crm_core_donation_block_view_donor_report_widget() {
  $block['subject'] = '';
  $block['content'] = '<div class="boxes-box" id="boxes-box-crm_core_donor_widget_box"><div class="boxes-box-content"><div class="widget-outer-wrapper">
  <div class="widget-inner-wrapper">
    <div class="widget widget-donors">' . views_embed_view('crm_core_donor_widget', 'donors') . '</div>
    <div class="widget widget-frequency">' . views_embed_view('crm_core_donor_widget', 'frequency') . '</div>
    <div class="widget widget-average">' . views_embed_view('crm_core_donor_widget', 'average') . '</div>
  </div>
</div></div><div class="boxes-box-controls"><ul class="links">
<li class="cancel last active"><a class="active boxes-processed" href="/crm/reports/donors">Cancel</a></li>
</ul></div></div>';
  return $block;
}
