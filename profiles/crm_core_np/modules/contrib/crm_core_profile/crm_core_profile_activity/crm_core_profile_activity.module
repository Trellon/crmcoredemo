<?php

/**
 * Implements hook_form_FORM_ID_alter
 */
function crm_core_profile_activity_form_crm_core_profile_entry_form_alter(&$form, &$form_state, $form_id) {  
  // here we plugin the activity field information
  $profile = $form_state['profile'];

  // load the crm_core_profile activity fields information
  $crm_core_profile_activity = crm_core_profile_activity_load($profile['name']);

  if (empty($crm_core_profile_activity)) {
    return;
  }

  $fields = $crm_core_profile_activity['fields'];
  if (empty($fields)) {
    return;  
  }

  $flag = 0;
  foreach ($fields as $field_name => $toggle) {
    if ($toggle !== 0) {
      $flag++;
    }
  }

  if ($flag === 0) {
    return;  
  }

  // create or load activity depending on profile settings
  $actions = crm_core_profile_activity_get_create_activity_actions($crm_core_profile_activity);
  $activity = null;
  foreach ($actions as $action => $value) {
    switch ($action) {
      case 'new':
        $values = array(
          'title' => $crm_core_profile_activity['bundle_type'],
          'type' => $crm_core_profile_activity['bundle_type'],
        );
        if (!empty($form_state['contact']->contact_id)) {
          $values['field_activity_participants'] = array(
            LANGUAGE_NONE => array(array(
              'target_id' => $form_state['contact']->contact_id,
              'target_type' => 'crm_core_contact',
            )),
          );
        }

        $activity = entity_create('crm_core_activity', $values);
        break;
      case 'recent':
        if (!empty($form_state['contact']->contact_id)) {
          $query = new EntityFieldQuery();
          $results = $query
            ->entityCondition('entity_type', 'crm_core_activity')
            ->entityCondition('bundle', $crm_core_profile_activity['bundle_type'])
            ->fieldCondition('field_activity_participants', 'target_id', $form_state['contact']->contact_id)
            ->propertyOrderBy('created', 'DESC')
            ->execute();
          if (!empty($results['crm_core_activity'])) {
            $activity = reset($results['crm_core_activity']);
            $activity = crm_core_activity_load($activity->activity_id);
          }
          break;
        }
      case 'url':
        if (!empty($_GET['activity_id'])) {
          $activity = crm_core_activity_load($_GET['activity_id']);
          if (!empty($activity) && $activity->field_activity_participants['und']['0']['target_id'] !=
                  $form_state['contact']->contact_id) {
            $activity = FALSE;
          }
        }
        break;
    }

    if (!empty($activity)) {
      if ($activity->type == $crm_core_profile_activity['bundle_type']) {
        break;
      }
      else {
        $activity = FALSE;
        continue;
      }
    }
  }

  if (isset($activity->field_activity_participants['und']['0']['target_id'])) {
    $form['activity']['contact_id'] = array(
      '#type' => 'value',
      '#value' => $activity->field_activity_participants['und']['0']['target_id'],
    );
  }

  // placing the activity form information in its own container
  $form['activity'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#parents' => array('activity'),
  );

  // crm_core_activity properties
  $form['activity']['type'] = array(
    '#type' => 'value',
    '#value' => $activity->type,
  );

  $form['activity']['title'] = array(
    '#type' => 'value',
    '#value' => $activity->title,
  );

  $form['activity']['uid'] = array(
    '#type' => 'value',
    '#value' => $activity->uid,
  );

  // attach and show the activity fields
  field_attach_form('crm_core_activity', $activity, $form['activity'], $form_state); 
  foreach ($fields['toggle'] as $field_name => $visibility) {
    if ($visibility === 0) {
      $form['activity'][$field_name]['#access'] = FALSE; 
    }
  }

  // getting the weight of each element from settings
  if (array_key_exists('weight', $fields)) {
    foreach ($fields['weight'] as $field_name => $value) {
      $form['activity'][$field_name]['#weight'] = $value['weight'];  
    }  
  }

  // @todo: offer an alter hook before everything to allow changes to the activity property and field data information

  // This alter function will be in the form of
  // hook_crm_core_profile_activity_alter
  // it will allow other modules to modify the activity form data
  drupal_alter('crm_core_profile_activity', $form['activity'], $crm_core_profile_activity['name']);
  // adding validation and submission handlers

  $form['#validate'][] = 'crm_core_profile_activity_entry_validate';
  $form['#submit'][] = 'crm_core_profile_activity_entry_submit';
}

/**
 * Implements hook_crm_core_profile_theme_alter
 * We use it to add our activity fields to the renderable fields array
 * in order to render them by element weight
 */
function crm_core_profile_activity_crm_core_profile_theme_alter(&$form, &$render_fields) {
  $profile_activity = crm_core_profile_activity_load($form['profile_name']['#value']);

  if (empty($profile_activity)) {
    return; 
  }

  $fields = $profile_activity['fields'];

  if (!array_key_exists('weight', $fields)) {
    $i = count($render_fields);
    foreach ($fields['toggle'] as $field => $toggle) {
      if ($toggle !== 0) {
        $render_fields[$i] = "activity||" . $field;
        $i++;  
      }
    }    
  }
  else 
  {
    foreach ($fields['weight'] as $field => $weight) {
      $render_fields[$weight['weight']['weight']] = "activity||" . $field;
    }     
  }
}

/**
 * Validation handler
 */
function crm_core_profile_activity_entry_validate($form, &$form_state) {
  $activity = (object) $form_state['values']['activity'];
  field_attach_form_validate('crm_core_activity', $activity, $form, $form_state);
}

/**
 * Submission handler
 */
function crm_core_profile_activity_entry_submit($form, &$form_state) {
  $activity = $form_state['complete form']['activity']['#entity'];

  if (empty($form_state['values']['activity']['field_activity_participants'][LANGUAGE_NONE][0]['target_id'])) {
    $activity->field_activity_participant[LANGUAGE_NONE][0]['target_id'] = $form_state['contact']->contact_id;
    $form_state['values']['activity']['field_activity_participants'][LANGUAGE_NONE][0]['target_id'] = $form_state['contact']->contact_id;
  }

  if (empty($form_state['values']['activity']['title'])) {
    $activity->title = $activity->bundle;
    $form_state['values']['activity']['title'] = $activity->bundle;
  }

  if (!isset($activity->created)) {
    $activity->created = REQUEST_TIME;
  }
  $activity->changed = REQUEST_TIME;

  $form_state_copy = $form_state;
  $form_state_copy['values'] = array_merge($form_state_copy['values'], $form_state_copy['values']['activity']);

  // Notify field widgets.
  field_attach_submit('crm_core_activity', $activity, $form, $form_state_copy);
  crm_core_activity_save($activity);  

  // pass this down to other submission handlers
  $form_state['crm_core_activity'] = $activity;
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function crm_core_profile_activity_form_crm_core_profile_new_form_alter(&$form, &$form_state, $form_id) {
  // if the core profile form is not new
  $profile = array();
  if (array_key_exists('profile', $form_state)) {
    $profile = $form_state['profile'];
  }

  // get crm core activity profile
  $crm_core_profile_activity = empty($profile) ? array() : crm_core_profile_activity_load($profile['name']);

  // get bundle type from form state or get from activity profile
  $bundle_type = '';
  if (isset($form_state['values']['activity']['bundle_type'])) {
    $bundle_type = $form_state['values']['activity']['bundle_type'];
  }
  else if (!empty($crm_core_profile_activity['bundle_type'])) {
    $bundle_type = $crm_core_profile_activity['bundle_type'];
  }

  // select bundles from the CRM
  $options = array('' => t('--Select--'));
  foreach(crm_core_activity_types() as $type => $activity_type) {
    $options[$type] = $activity_type->label;  
  }

  $form['activity'] = array(
    '#tree' => TRUE,
    '#title' => t('Activity Information'),
    '#type' => 'fieldset', 
    '#weight' => 5,
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
    '#prefix' => '<div id="crm_core_profile_activity_bundle">',
    '#suffix' => '</div>',
  );

  if (empty($profile)) {
    $form['activity']['created'] = array(
      '#type' => 'value',
      '#value' => time(),
    );
  }

  // copy the machine name form the main name
  // $form['activity']['name'] = $form['name'];
  $form['activity']['bundle_type'] = array(
    '#type' => 'select',
    '#title' => t('Select the activity type below:'),
    '#options' => $options,
    // depending on the contact bundle chose, form is updated
    '#ajax' => array(
      'callback' => 'crm_core_profile_activity_ajax_callback',
      'wrapper' => 'crm_core_profile_activity_bundle',
     ),
     '#default_value' => (isset($crm_core_profile_activity['bundle_type'])) ? $crm_core_profile_activity['bundle_type'] : '',
  );

  // add validation and submission handlers
  $form['#validate'][] = 'crm_core_profile_activity_form_validate';
  $form['#submit'][] = 'crm_core_profile_activity_form_submit';

  // do not build rest of the form if bundle_type is empty
  if (empty($bundle_type)) {
    return;
  }
  
  // get field options
  $field_options = array();
  foreach(field_info_instances('crm_core_activity', $bundle_type) as $field_name => $field) {
    $field_options[$field_name] = $field['label'];
  }

  // get default field values
  $fields_default = array();
  if (!empty($crm_core_profile_activity['fields'])) {
    $fields_default = $crm_core_profile_activity['fields'];
  }

  $form['activity']['fields'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );

  $form['activity']['fields']['toggle'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Field selection',
    '#options' => $field_options,
    '#description' => t('Check the activity fields that will appear on the profile form'),
    '#default_value' => (!empty($fields_default['toggle'])) ? $fields_default['toggle'] : array(),
  );

  $create_activity_actions = crm_core_profile_activity_get_create_activity_actions($crm_core_profile_activity);

  $form['#tree'] = TRUE;
  $form['activity']['create_activity_actions'] = array(
    '#type' => 'fieldset',
    '#title' => 'Load activity sequence',
    '#description' => 'Listed actions will be performed to get proper activity object.'
  );
  foreach ($create_activity_actions as $id => $action) {
    $form['activity']['create_activity_actions'][$id]['label'] = array('#markup' => $action['label']);
    $form['activity']['create_activity_actions'][$id]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight for @title', array('@title' => $action['label'])),
      '#title_display' => 'invisible',
      '#default_value' => $action['weight'],
    );
  }
}

/**
 * Form validation handler
 */
function crm_core_profile_activity_form_validate($form, &$form_state) {
}

/**
 * Form submission handler
 */
function crm_core_profile_activity_form_submit($form, &$form_state) {
  $form_state['values']['activity']['name'] = $form_state['values']['name'];  
  $activity = $form_state['values']['activity'];

  if (empty($activity['bundle_type'])) {
    crm_core_profile_activity_crm_core_profile_delete($activity['name']);
    return;  
  }

  if (!empty($form_state['crm_core_profile_activity'])) {
    $fields = $form_state['crm_core_profile_activity']['fields'];
    $activity['fields']['weight'] = (isset($fields['weight'])) ? $fields['weight'] : array();    
  }
  crm_core_profile_activity_save($activity);
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function crm_core_profile_activity_form_crm_core_profile_weight_form_alter(&$form, &$form_state, $form_id) {
  // if the core profile form is not new
  $profile = array();
  if (array_key_exists('profile', $form_state)) {
   $profile = $form_state['profile'];
  }
   if (!empty($profile)) {
     $crm_core_profile_activity = crm_core_profile_activity_load($profile['name']);
     $form_state['crm_core_profile_activity'] = $crm_core_profile_activity;
  }

  if(empty($crm_core_profile_activity)) {
    return;  
  }

  $fields = $crm_core_profile_activity['fields'];
  $fields['weight'] = (isset($fields['weight'])) ? $fields['weight'] : array();

  $fields_toggle = array();
  // sort the toggles if weight has been assigned
  foreach($fields['weight'] as $field_name => $value) {
    $fields_toggle[$field_name] = $fields['toggle'][$field_name];
  }
  $fields_toggle = (!empty($fields_toggle)) ? $fields_toggle : $fields['toggle'];

  foreach ($fields_toggle as $field_name => $visibility) {
    if ($visibility !== 0) {
        $field = field_info_instance('crm_core_activity', $field_name, $crm_core_profile_activity['bundle_type']);
        $form['weight'][$field_name]['label'] = array('#markup' => check_plain($field['label']));
        $form['weight'][$field_name]['weight'] = array(
          '#type' => 'weight',
          '#title' => t('Weight for @title', array('@title' => $field['label'])),
          '#title_display' => 'invisible',
          '#default_value' => (array_key_exists($field_name, $fields['weight'])) ?  $fields['weight'][$field_name]['weight'] : -10,
        );
    }  
  }

  // @CRITICAL: the sorting for activity field works except it is still being appended to the form array to the sorting form
  // because we are using form alter, we will need to resort all the form elements in here according to their weight
  // re-arrange the form based on weight
  $sort_keys = array();
  foreach($form['weight'] as $field_names => $values) {
    $sort_keys[$field_names] = $values['weight']['#default_value']['weight'];  
  }

  asort($sort_keys);
  $sort_keys = array_keys($sort_keys);
  $orderd = array();
  foreach ($sort_keys as $field_name) {
    if (array_key_exists($field_name, $form['weight'])) {
      $ordered[$field_name] = $form['weight'][$field_name];  
    }
  }

  $form['weight'] = $ordered;

  $form['#validate'][] = 'crm_core_profile_activity_weight_form_validate';
  $form['#submit'][] = 'crm_core_profile_activity_weight_form_submit';
}

function crm_core_profile_activity_weight_form_validate($form, &$form_state) {
}

/**
 * Submission handler
 */
function crm_core_profile_activity_weight_form_submit($form, &$form_state) {
  $crm_core_profile_activity = $form_state['crm_core_profile_activity'];
  $activity_fields = $crm_core_profile_activity['fields'];

  // save the weight order (just for activity fields)
  foreach ($form_state['values']['weight'] as $field => $weight) {
    if (array_key_exists($field, $activity_fields['toggle'])) {
      if($activity_fields['toggle'][$field] !== 0) {
        $sort_keys[$field] = $weight;
      }
    } 
  }

  asort($sort_keys);

  // unset($form_state['values']['weight']); 
  foreach($sort_keys as $field_name => $weight) {
    $weights[$field_name]['weight'] = $weight;
  }

  $activity_fields['weight'] = $weights;
  $crm_core_profile_activity['fields'] = $activity_fields;

  crm_core_profile_activity_save($crm_core_profile_activity);
}

/**
 * Saves a profile form activity entry
 */
function crm_core_profile_activity_save($record) {
  $crm_core_profile_activity = crm_core_profile_activity_load($record['name']);
  if (!empty($crm_core_profile_activity)) {
    drupal_write_record('crm_core_profile_activity', $record, 'name');  
  } 
  else {
    drupal_write_record('crm_core_profile_activity', $record);
  } 
}

/**
 * Loads all profile activities
 */
function crm_core_profile_activity_load_all($conditions = array()) {
  $data = array();
  $query = db_select('crm_core_profile_activity', 'a')
    ->fields('a');
  
  if (!empty($conditions)) {
    foreach($conditions as $condition) {
      if (!array_key_exists('operator', $condition)) {
        $condition['operator'] = '=';  
      }
      $query->condition($condition['field'], $condition['value'], $condition['operator']);
    }  
  }

  $result = $query->execute();
  while($record = $result->fetchAssoc()) {
    // Unserialize data
    if (isset($record['fields'])) {
      $record['fields'] = unserialize($record['fields']);
    }
    if (isset($record['create_activity_actions'])) {
      $record['create_activity_actions'] = unserialize($record['create_activity_actions']);
    }
    $data[$record['name']] = $record;  
  }

  return $data;    
}

/**
 * Loads a profile form activity entry
 */
function crm_core_profile_activity_load($machine_name) {
  $data = array();
  $query = db_select('crm_core_profile_activity', 'pa')
    ->fields('pa')
    ->condition('name', $machine_name);

  $result = $query->execute();
  $data = $result->fetchAssoc();

  // Unserialize data
  if (isset($data['fields'])) {
    $data['fields'] = unserialize($data['fields']);
  }
  if (isset($data['create_activity_actions'])) {
    $data['create_activity_actions'] = unserialize($data['create_activity_actions']);
  }

  return $data;
}

/**
 * Implements hook_crm_core_profile_delete
 */
function crm_core_profile_activity_crm_core_profile_delete($machine_name) {
  db_delete('crm_core_profile_activity')
  ->condition('name', $machine_name)
  ->execute();
}

/**
 * Ajax callback;
 */
function crm_core_profile_activity_ajax_callback($form, &$form_state) {
  $variables['form'] =& $form;
  crm_core_profile_activity_preprocess_crm_core_profile_new_form($variables);
  return $form['activity'];
}

/**
 * Get load contact sequence.
 */
function crm_core_profile_activity_get_create_activity_actions($profile) {
  $actions = array();

  $p_actions = array();
  if (!empty($profile['create_activity_actions'])) {
      $p_actions = $profile['create_activity_actions'];  
  }

  $actions['url'] = array(
    'weight' => isset($p_actions['url']) ? $p_actions['url']['weight'] : 10,
    'label' => t('Load activity from URL parameter (activity_id)'),
  );

  if (module_exists('crm_user_sync')) {
    $actions['recent'] = array(
      'weight' => isset($p_actions['recent']) ? $p_actions['recent']['weight'] : 10,
      'label' => t('Load recent activity for the contact'),
    );
  }

  $actions['new'] = array(
    'weight' => isset($p_actions['new']) ? $p_actions['new']['weight'] : 10,
    'label' => t('Create new activity'),
  );

  uasort($actions, 'crm_core_profile_weight_cmp');

  return $actions;
}

/**
 * Implements hook_preprocess().
 */
function crm_core_profile_activity_preprocess_crm_core_profile_new_form(&$variables) {
  $form =& $variables['form']['activity'];
  $rows = array();
  if (!empty($form['create_activity_actions'])) {
    foreach (element_children($form['create_activity_actions']) as $id) {
      $form['create_activity_actions'][$id]['weight']['#attributes']['class'] = array('text-format-order-weight');
      $rows[] = array(
        'data' => array(
          drupal_render($form['create_activity_actions'][$id]['label']),
          drupal_render($form['create_activity_actions'][$id]['weight']),
        ),
        'class' => array('draggable'),
      );
    }

    $header = array(t('Action'), t('Weight'));
    $form['create_activity_actions']['content']['#markup'] = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'text-format-order')));
  }
}
