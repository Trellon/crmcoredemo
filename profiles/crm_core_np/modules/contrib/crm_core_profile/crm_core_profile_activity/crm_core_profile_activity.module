<?php

/**
 * Implements hook_form_FORM_ID_alter
 */
function crm_core_activity_form_crm_core_profile_entry_form_alter(&$form, &$form_state, $form_id) {
  // here we plugin the activity field information
  $profile = $form_state['profile'];

  // load the crm_core_profile activity fields information
  $crm_core_profile_activity = crm_core_profile_activity_load($profile['name']);

  if (empty($crm_core_profile_activity)) {
    return;
  }

  $fields = unserialize($crm_core_profile_activity['activity_fields']);
  if (empty($fields)) {
    return;
  }

  $flag = 0;
  foreach ($fields as $field_name => $toggle) {
    if ($toggle !== 0) {
      $flag++;
    }
  }

  if ($flag === 0) {
    return;
  }

  // we always create new activity
  $activity = new stdClass();
  $activity->type = $crm_core_profile_activity['activity_bundle_type'];

  // placing the activity form information in its own container
  $form['activity'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#parents' => array('activity'),
  );

  // crm_core_activity properties
  $form['activity']['type'] = array(
    '#type' => 'value',
    '#value' => $activity->type,
  );

  // This title will later be changed
  $form['activity']['title'] = array(
    '#type' => 'value',
    '#value' => $activity->type,
  );

  $form['activity']['uid'] = array(
    '#type' => 'value',
    '#value' => 1,
  );

  // attach and show the activity fields
  // $fields = unserialize($crm_core_profile_activity['fields']);
  field_attach_form('crm_core_activity', $activity, $form['activity'], $form_state);
  foreach ($fields['toggle'] as $field_name => $visibility) {
    if ($visibility === 0) {
      $form['activity'][$field_name]['#access'] = FALSE;
    }
  }

  // getting the weight of each element from settings
  if (array_key_exists('weight', $fields)) {
    foreach ($fields['weight'] as $field_name => $value) {
      $form['activity'][$field_name]['#weight'] = $value['weight'];
    }
  }

  // @todo: offer an alter hook before everything to allow changes to the activity property and field data information

  // This alter function will be in the form of
  // hook_crm_core_profile_activity_alter
  // it will allow other modules to modify the activity form data
  drupal_alter('crm_core_profile_activity', $form['activity'], $crm_core_profile_activity['activity_name']);
  // adding validation and submission handlers

  $form['#validate'][] = 'crm_core_profile_activity_entry_validate';
  $form['#submit'][] = 'crm_core_profile_activity_entry_submit';

  //dpm($form);
}

/**
 * Implements hook_crm_core_profile_theme_alter
 * We use it to add our activity fields to the renderable fields array
 * in order to render them by element weight
 */
function crm_core_profile_activity_crm_core_profile_theme_alter(&$form, &$render_fields) {
  $profile_activity = crm_core_profile_activity_load($form['profile_name']['#value']);

  if (empty($profile_activity)) {
    return;
  }

  $fields = unserialize($profile_activity['activity_fields']);

  if (!array_key_exists('weight', $fields)) {
    $i = count($render_fields);
    foreach ($fields['toggle'] as $field => $toggle) {
      if ($toggle !== 0) {
        $render_fields[$i] = "activity||" . $field;
        $i++;
      }
    }
  }
  else
  {
    foreach ($fields['weight'] as $field => $weight) {
        $render_fields[$weight['weight']['weight']] = "activity||" . $field;
    }
  }
}

/**
 * Validation handler
 */
function crm_core_profile_activity_entry_validate($form, &$form_state) {
  $activity = (object) $form_state['values']['activity'];
  field_attach_form_validate('crm_core_activity', $activity, $form, $form_state);
}

/**
 * Submission handler
 */
function crm_core_profile_activity_entry_submit($form, &$form_state) {
  // in order to create the activity, we need to have the contact id in the reference
  // this can be achieved in 2 ways
  // 1. From the new contact record created from the crm_core_profile
  // 2. From the contact record loaded from crm_core_profile
  // (actually not) debug, the activity participant from 1
  $form_state['values']['activity']['field_activity_participants'][LANGUAGE_NONE][0]['target_id'] = $form_state['contact']->contact_id;

  $activity = (object) $form_state['values']['activity'];

  if (!isset($activity->created)) {
    $activity->created = REQUEST_TIME;
  }
  $activity->created = REQUEST_TIME;

  // Notify field widgets.
  field_attach_submit('crm_core_activity', $activity, $form, $form_state);
  crm_core_activity_save($activity);

  // pass this down to other submission handlers
  $form_state['crm_core_activity'] = $activity;
}

/**
 * Implements hook_crm_core_profile_new_alter
 *
 */
function crm_core_activity_crm_core_profile_new_alter(&$form, &$form_state) {
  // if the core profile form is not new
  $profile = array();
  if (array_key_exists('profile', $form_state)) {
   $profile = $form_state['profile'];
  }

  // saved profile loaded, just adding activity parts
  if (!empty($profile)) {
    $crm_core_profile_activity = crm_core_profile_activity_load($profile['name']);
    $form_state['crm_core_profile_activity'] = $crm_core_profile_activity;
  }

  // select bundles from the CRM
  $options = array('' => t('--Select--'));
  foreach(crm_core_activity_types() as $type => $activity_type) {
    $options[$type] = $activity_type->label;
  }

  $form['activity'] = array(
    '#tree' => TRUE,
    '#title' => t('Activity Information'),
    '#type' => 'fieldset',
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  if (empty($profile)) {
    $form['activity']['activity_created'] = array(
      '#type' => 'value',
      '#value' => time(),
    );
  }

  // copy the machine name form the main name
  // $form['activity']['name'] = $form['name'];
  $form['activity']['activity_bundle_type'] = array(
    '#type' => 'select',
    '#title' => t('Select the activity type below:'),
    '#options' => $options,
    // depends on the contact bundle chose, different fields will appear
    '#ajax' => array(
      'callback' => 'crm_core_profile_activity_ajax_callback',
      'wrapper' => 'crm_core_profile_activity_bundle_fields',
     ),
     '#default_value' => (isset($crm_core_profile_activity)) ? $crm_core_profile_activity['activity_bundle_type'] : '',
  );

  $field_options = array();

  if (!empty($crm_core_profile_activity) && !isset($form_state['values']['activity']['activity_bundle_type'])) {
    $form_state['values']['activity']['activity_bundle_type'] = $crm_core_profile_activity['activity_bundle_type'];
  }

  if (!empty($form_state['values']['activity']['activity_bundle_type'])) {
     foreach(field_info_instances('crm_core_activity', $form_state['values']['activity']['activity_bundle_type']) as $field_name => $field) {
      $field_options[$field_name] = $field['label'];
    }
  }

  $fields_default = array();
  if (!empty($crm_core_profile_activity)) {
    $fields_default = unserialize($crm_core_profile_activity['activity_fields']);
  }

  $form['activity']['activity_fields'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );

  $form['activity']['activity_fields']['toggle'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Field selection',
    '#options' => $field_options,
    '#description' => t('Check the activity fields that will appear on the profile form'),
    '#prefix' => '<div id="crm_core_profile_activity_bundle_fields">',
    '#suffix' => '</div>',
    '#default_value' => (!empty($fields_default['toggle'])) ? $fields_default['toggle'] : array(),
  );

  // adding validation and submission handlers
  $form['#validate'][] = 'crm_core_profile_activity_form_validate';
  $form['#submit'][] = 'crm_core_profile_activity_form_submit';
}

/**
 * Form validation handler
 */
function crm_core_profile_activity_form_validate($form, &$form_state) {
  // dpm($form_state['profile']);
  // dpm($form_state['values']['activity']);
  // dpm($form_state['crm_core_profile_activity']);
  // form_set_error('aaa', 'bbb');
}

/**
 * Form submission handler
 */
function crm_core_profile_activity_form_submit($form, &$form_state) {
  $form_state['values']['activity']['activity_name'] = $form_state['values']['name'];
  $activity = $form_state['values']['activity'];

  // we always check the toggle for activity bundle and at least 1 field is toggled to save the activity field
  $count = 0;
  foreach($activity['activity_fields']['toggle'] as $toggle) {
    if ($toggle === 0) {
      $count++;
    }
  }

  if (!isset($activity['activity_bundle_type'])) {
    return;
  }
  if ($count == count($activity['activity_fields']['toggle'])) {
    return;
  }
  if (!empty($form_state['crm_core_profile_activity'])) {
    $fields = unserialize($form_state['crm_core_profile_activity']['activity_fields']);
    $activity['activity_fields']['weight'] = (isset($fields['weight'])) ? $fields['weight'] : array();
  }

  crm_core_profile_activity_save($activity);
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function crm_core_profile_activity_form_crm_core_profile_weight_form_alter(&$form, &$form_state, $form_id) {

  // if the core profile form is not new
  $profile = array();
  if (array_key_exists('profile', $form_state)) {
   $profile = $form_state['profile'];
  }
   if (!empty($profile)) {
     $crm_core_profile_activity = crm_core_profile_activity_load($profile['name']);
     $form_state['crm_core_profile_activity'] = $crm_core_profile_activity;
  }

  if(empty($crm_core_profile_activity)) {
    return;
  }

  $fields = unserialize($crm_core_profile_activity['activity_fields']);

  $fields['weight'] = (isset($fields['weight'])) ? $fields['weight'] : array();

  $fields_toggle = array();
  // sort the toggles if weight has been assigned
  foreach($fields['weight'] as $field_name => $value) {
    $fields_toggle[$field_name] = $fields['toggle'][$field_name];
  }
  $fields_toggle = (!empty($fields_toggle)) ? $fields_toggle : $fields['toggle'];

  foreach ($fields_toggle as $field_name => $visibility) {
    if ($visibility !== 0) {
        $field = field_info_instance('crm_core_activity', $field_name, $crm_core_profile_activity['activity_bundle_type']);
        $form['weight'][$field_name]['label'] = array('#markup' => check_plain($field['label']));
        $form['weight'][$field_name]['weight'] = array(
         '#type' => 'weight',
         '#title' => t('Weight for @title', array('@title' => $field['label'])),
         '#title_display' => 'invisible',
         '#default_value' => (array_key_exists($field_name, $fields['weight'])) ?  $fields['weight'][$field_name]['weight'] : -10,
    );
    }
  }

 // @CRITICAL: the sorting for activity field works except it is still being appended to the form array to the sorting form
  // because we are using form alter, we will need to resort all the form elements in here according to their weight
  // re-arrange the form based on weight
  $sort_keys = array();
  foreach($form['weight'] as $field_names => $values) {
    $sort_keys[$field_names] = $values['weight']['#default_value']['weight'];
  }

  asort($sort_keys);
  $sort_keys = array_keys($sort_keys);
  $orderd = array();
  foreach ($sort_keys as $field_name) {
    if (array_key_exists($field_name, $form['weight'])) {
      $ordered[$field_name] = $form['weight'][$field_name];
    }
  }

  $form['weight'] = $ordered;

  $form['#validate'][] = 'crm_core_profile_activity_weight_form_validate';
  $form['#submit'][] = 'crm_core_profile_activity_weight_form_submit';

}

function crm_core_profile_activity_weight_form_validate($form, &$form_state) {
   // form_set_error('aaa', 'bbb');
}

/**
 * Submission handler
 */
function crm_core_profile_activity_weight_form_submit($form, &$form_state) {

  $crm_core_profile_activity = $form_state['crm_core_profile_activity'];
  $activity_fields = unserialize($crm_core_profile_activity['activity_fields']);

  // save the weight order (just for activity fields)
   foreach ($form_state['values']['weight'] as $field => $weight) {
     if (array_key_exists($field, $activity_fields['toggle'])) {
       if($activity_fields['toggle'][$field] !== 0) {
         $sort_keys[$field] = $weight;
       }
     }
   }

   asort($sort_keys);

   // unset($form_state['values']['weight']);
   foreach($sort_keys as $field_name => $weight) {
     $weights[$field_name]['weight'] = $weight;
   }

   $activity_fields['weight'] = $weights;
   $crm_core_profile_activity['activity_fields'] = $activity_fields;

   crm_core_profile_activity_save($crm_core_profile_activity);
}

/**
 * Saves a profile form activity entry
 */
function crm_core_profile_activity_save($record) {
  $crm_core_profile_activity = crm_core_profile_activity_load($record['activity_name']);
  if (!empty($crm_core_profile_activity)) {
    drupal_write_record('crm_core_profile_activity', $record, 'activity_name');
  }
  else {
    drupal_write_record('crm_core_profile_activity', $record);
  }
}

/**
 * Loads a profile form activity entry
 */
function crm_core_profile_activity_load($machine_name) {

  $data = array();
  $query = db_select('crm_core_profile_activity', 'pa')
  ->fields('pa')
  ->condition('activity_name', $machine_name);

  $result = $query->execute();
  $data = $result->fetchAssoc();

  return $data;
}

/**
 * Implements hook_crm_core_profile_delete
 */
function crm_core_profile_activity_crm_core_profile_delete($machine_name) {
  db_delete('crm_core_profile_activity')
  ->condition('activity_name', $machine_name)
  ->execute();
}


/**
 * Ajax callback
 */
function crm_core_profile_activity_ajax_callback($form, &$form_state) {
  return $form['activity']['activity_fields'];
}