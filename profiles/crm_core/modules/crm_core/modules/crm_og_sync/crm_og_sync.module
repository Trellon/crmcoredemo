<?php

/**
 * Implements hook_menu()
 */
function crm_og_sync_menu() {
  $items = array();

  $items['admin/structure/crm/og_sync'] = array(
    'title' => t('Organic Group Synchronization'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_og_sync_admin_form'),
    'access arguments' => array('administer og-sync'),
    'file' => 'crm_og_sync.admin.inc',
    'weight' => 20,
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function crm_og_sync_permission() {
  return array(
    'administer og-sync' => array(
      'title' => t('Administer Organic Group Synchronization'),
      'description' => t('Access to configuration pages for Organic Group Synchronization'),
    ),
  );
}

/**
 * Implements hook_node_insert
 * Use this hook to create new contact and relationship to the node
 */
function crm_og_sync_node_insert($node) {
  crm_og_sync_sync_node($node);
}

/**
 * Implements hook_node_update
 * Use this hook to create new contact or update existing contact
 */
function crm_og_sync_node_update($node) {
  crm_og_sync_sync_node($node, 'update');  
}

/**
 * Implements hook_node_delete
 * Use this hook to delete the contact and the relationship reference
 */
function crm_og_sync_node_delete($node) {
  crm_og_sync_sync_node($node, 'delete');
}

/**
 * Implements hook_field_delete_instance
 * If a field instance has been deleted from the og:node, we will delete it from the configuration
 */
function crm_og_sync_field_delete_instance($instance) {
  $sync_node_types = array();
  // all the types
  $og_node_types = _crm_og_sync_og_types();
  foreach($og_node_types as $node_type) {
    $og_node_sync_settings = _crm_og_sync_settings_get($node_type);
    if ((bool) $og_node_sync_settings['status']) {
      $sync_node_types[] = $node_type;  
    }  
  }
  
  if ($instance['entity_type'] == 'node') {
    if (in_array($instance['bundle'], $sync_node_types)) {
      $settings = _crm_og_sync_settings_get($instance['bundle']);
      $field_mapping = unserialize($settings['field_mapping']);
      unset($field_mapping[$instance['field_name']]);
      $settings['field_mapping'] = $field_mapping;
      // re-save the field mapping
      crm_og_sync_save_config($settings, FALSE);   
    }  
  }    
}

/**
 * Wrapper function for syncing nodes
 */
function crm_og_sync_sync_node($node, $op = 'create') {
  $og_node_types = _crm_og_sync_og_types();
 if (array_key_exists($node->type, $og_node_types)) {
   $node_type_config = _crm_og_sync_settings_get($node->type);
   if ((bool) $node_type_config['status']) {
     crm_og_sync_sync($node, $node_type_config, $op);
   }      
 }   
}

/**
 * Main function that syncs og node to crm organizations
 */
function crm_og_sync_sync($og_entity, $og_entity_sync_settings, $op = 'create', $entity_type = 'node') {
  // $og_entity here really refers to the $node object
  $field_mapping = unserialize($og_entity_sync_settings['field_mapping']);
  
  switch($op) {
    case 'delete':
      $related_contact = _crm_og_sync_get_related_entity($entity_type, $og_entity->nid, 'crm_og_sync');
      if (!empty($related_contact)) {
         // delete the relation and contact
        $query = relation_query($entity_type, $og_entity->nid);
        $relations = $query->execute(); 
        foreach($relations as $relation) {
          // just delete the relation type of crm_og_sync
          if ($relation->relation_type == 'crm_og_sync') {
            relation_delete($relation->rid);  
          }  
        }
        crm_core_contact_delete($related_contact->contact_id);
      }
    break;
    
    case 'update':
      $related_contact = _crm_og_sync_get_related_entity($entity_type, $og_entity->nid, 'crm_og_sync');
      if (empty($related_contact)) {
        // somehow there is no associated contact, CREATE ONE!
        crm_og_sync_sync($og_entity, $og_entity_sync_settings);
      }
      else {
        $fields = array();
        // update contact field data with the entity (node) data.
        foreach ($field_mapping as $og_entity_field_name => $contact_field_name) {
          if ($contact_field_name !== '__none') {
            $fields[$field_mapping[$og_entity_field_name]] = $og_entity->$og_entity_field_name;  
          }  
        }
        // overwrite the contact field data
        foreach($fields as $field_name => $field) {
          $related_contact->$field_name = $field;
        }
        // contaft name to node title
        $related_contact->contact_name[$og_entity->language][0]['given'] = $og_entity->title;
        
       // save the contact
       crm_core_contact_save($related_contact);  
      }
    break;
    case 'create':
    default:
       $fields = array();
       foreach ($field_mapping as $og_entity_field_name => $contact_field_name) {
         if ($contact_field_name !== '__none') {
           $fields[$field_mapping[$og_entity_field_name]] = $og_entity->$og_entity_field_name;  
         }  
       }
       // we can always use node title as the contact name
       if (!array_key_exists('contact_name', $fields)) {
         $fields['contact_name'][$og_entity->language][0] = array(
           'title' => '',
           'family' => '',
           'generational' => '',
           'credentials' => '',
         );
         $fields['contact_name'][$og_entity->language][0]['given'] = $og_entity->title;  
       }
       
       // contact creation
       $new_contact = _crm_og_sync_contact_create($og_entity_sync_settings['crm_contact_type'], $fields);
       $saved_contact = crm_core_contact_save($new_contact);
       
       // create relationship
       $source = array('bundle' => $og_entity->type, 'id' => $og_entity->nid);
       $target = array('id' => $saved_contact->contact_id);
       _crm_og_sync_create_relation($source, $target);
    break;  
  }
}

/**
 * Implements hook_crm_core_contact_insert
 */
function crm_og_sync_crm_core_contact_insert($contact) {}

/**
 * Implements hook_crm_core_contact_update
 * Offering some reverse sync to fields updated from crm_contact back to the organic group
 */
function crm_og_sync_crm_core_contact_update($contact) {
  
  if (!(bool) variable_get('crm_og_sync_reverse', 0)) {
    return;  
  }
  
  $og_node = _crm_og_sync_get_related_entity('crm_core_contact', $contact->contact_id, 'crm_og_sync');
  if (empty($og_node)) {
    return;
  }

  $node_type_config = _crm_og_sync_settings_get($og_node->type);
  $field_mapping = unserialize($node_type_config['field_mapping']);
  
  foreach ($field_mapping as $og_entity_field => $contact_field) {
    if ($contact_field !== '__none') {
       $og_node->$og_entity_field = $contact->$contact_field; 
    }    
  }
  // sync the title if needed
  if (isset($contact->contact_name)) {
    $og_node->title = name_format($contact->contact_name['und'][0], '((((t+ig)+im)+if)+is)+jc');
  }
  // Save the new node

  _crm_og_sync_node_save($og_node);
}

/**
 * Implements hook_crm_core_contact_delete
 * Not used right now because there are group content.
 * We do not want to delete the organic group accidently
 */
function crm_og_sync_crm_core_contact_delete($contact) {}

function crm_og_sync_init() {}

/**
 * Save a crm_og_sync configuration setting
 * @param
 * array $record    A record to be saved
 *                  keys: og_bundle_type (i.e. node type)
 *                        og_entity_type (i.e. node)
 *                        status (0 or 1)
 *                        field_mapping (an array of entity to crm contact field mapping)
 * bool $is_new     Designate if this is a new record or not
 *
 * @return
 * @see drupal_write_record
 */
function crm_og_sync_save_config($record = array(), $is_new = TRUE) {
   // save the record   
   if ($is_new) {
     drupal_write_record('crm_og_sync_settings', $record);
   }
   else {
     drupal_write_record('crm_og_sync_settings', $record, array('og_bundle_type', 'og_entity_type'));  
   }  
}

/**
 * create a relation between the node and the contact
 * @param
 * mixed $source_entity    An array or stdClass object with keys of type, bundle, and id
 * mixed $target_entity    An array or stdClass object with keys of type, bundle, and id
 */
function _crm_og_sync_create_relation($source_entity, $target_entity) {
  if (is_array($source_entity)) {
    $source_entity = (object) $source_entity;  
  } 
  if (is_array($target_entity)) {
    $target_entity = (object) $target_entity;  
  }
  
  // Create the relation
   $endpoints = array(
     array(
       'entity_type' => (isset($source_entity->type)) ? $source_entity->type : 'node',
       'entity_bundle' => $source_entity->bundle,
       'entity_id' => $source_entity->id,
     ),
     array(
       'entity_type' => (isset($target_entity->type)) ? $target_entity->type : 'crm_core_contact',
       'entity_bundle' => (isset($target_entity->bundle)) ? $target_entity->bundle : 'organization',
       'entity_id' => $target_entity->id,
     ),
   );
   $relation = relation_create('crm_og_sync', $endpoints);
   relation_save($relation);  
}
/**
 * Instantiate a new contact object to be created (not saved) 
 *
 * @params
 * string $type    contact type
 * array $fields   an array of fields to be added to the contact keyed by field name
 *
 * @return
 * stdClass $contact  A contact object to be created
 */
function _crm_og_sync_contact_create($type, $fields) {
  $contact = array(
    'uid' => 1,
    'type' => $type,
  );
  
  foreach($fields as $field_name => $field) {
    $contact[$field_name] = $field;  
  }
  
  return (object) $contact;   
}

/**
 * Return og node types
 */
function _crm_og_sync_og_types() {
  $og_type = array();
  $node_types = _node_types_build()->types;
  $node_types = array_keys($node_types);
  
  foreach($node_types as $node_type) {
    if (og_is_group_type('node', $node_type)) {
       $og_type[$node_type] = $node_type;   
    }  
  }
  return $og_type; 
}

/*
 * Return contact fields associated with a contact type
 */
function _crm_og_sync_contact_fields($contact_type = 'organization', $return_mode = 'options') {
  $return = array();
  $contact_type_fields = field_info_instances('crm_core_contact', $contact_type);
  switch($return_mode) {
    case 'options':
    default:
      foreach($contact_type_fields as $field_name => $field) {
        $return[$field_name] = $field['label'];  
      }
    break;  
  }
  return $return; 
}

/**
 * Get sychronization setting for a specific entity/bundle type
 */
function _crm_og_sync_settings_get($bundle_type, $entity_type = 'node') {
  $data = array();
  $query = db_select('crm_og_sync_settings', 'o')
  ->fields('o')
  ->condition('og_entity_type', $entity_type)
  ->condition('og_bundle_type', $bundle_type);
  
  $result = $query->execute();
  
  $data = $result->fetchAssoc();

  return $data;
}

/**
 * Copied from relation.module, (beta 1)
 * gives an error if the entity id is not found, so need to fix that
 */
function _crm_og_sync_get_related_entity($entity_type, $entity_id, $relation_type = NULL, $r_index = NULL) {
  $query = relation_query($entity_type, $entity_id);
  if ($relation_type) {
    $query->propertyCondition('relation_type', $relation_type);
  }
  if (isset($r_index)) {
    $query->propertyCondition('r_index', $r_index);
  }
  $results = $query->execute();
  
  if (empty($results)) {
    return;
  }
  
  $result = reset($results);
  $relation = relation_load($result->rid);
  $request_key = $entity_type . ':' . $entity_id;
  $entities = $relation->endpoints[LANGUAGE_NONE];
  $first_entity_key = $entities[0]['entity_type'] . ':' . $entities[0]['entity_id'];
  if (isset($r_index)) {
    $request_key = $request_key . ':' . $r_index;
    $first_entity_key = $first_entity_key . ':' . $entities[0]['r_index'];
  }
  if ($request_key == $first_entity_key) {
    $other_endpoints = entity_load($entities[1]['entity_type'], array($entities[1]['entity_id']));
    return reset($other_endpoints);
  }
  $other_endpoints = entity_load($entities[0]['entity_type'], array($entities[0]['entity_id']));
  return reset($other_endpoints);
}

/**
 * copied from node_save
 * get rid of the hooks so reverse sync don't create an infinite loop
 */
function _crm_og_sync_node_save($node) {
  $transaction = db_transaction();

  try {
    // Load the stored entity, if any.
    if (!empty($node->nid) && !isset($node->original)) {
      $node->original = entity_load_unchanged('node', $node->nid);
    }

    field_attach_presave('node', $node);
    global $user;

    // Determine if we will be inserting a new node.
    if (!isset($node->is_new)) {
      $node->is_new = empty($node->nid);
    }

    // Set the timestamp fields.
    if (empty($node->created)) {
      $node->created = REQUEST_TIME;
    }
    // The changed timestamp is always updated for bookkeeping purposes,
    // for example: revisions, searching, etc.
    $node->changed = REQUEST_TIME;

    $node->timestamp = REQUEST_TIME;
    $update_node = TRUE;

    // Let modules modify the node before it is saved to the database.
    // module_invoke_all('node_presave', $node);
    // module_invoke_all('entity_presave', $node, 'node');

    if ($node->is_new || !empty($node->revision)) {
      // When inserting either a new node or a new node revision, $node->log
      // must be set because {node_revision}.log is a text column and therefore
      // cannot have a default value. However, it might not be set at this
      // point (for example, if the user submitting a node form does not have
      // permission to create revisions), so we ensure that it is at least an
      // empty string in that case.
      // @todo: Make the {node_revision}.log column nullable so that we can
      // remove this check.
      if (!isset($node->log)) {
        $node->log = '';
      }
    }
    elseif (!isset($node->log) || $node->log === '') {
      // If we are updating an existing node without adding a new revision, we
      // need to make sure $node->log is unset whenever it is empty. As long as
      // $node->log is unset, drupal_write_record() will not attempt to update
      // the existing database column when re-saving the revision; therefore,
      // this code allows us to avoid clobbering an existing log entry with an
      // empty one.
      unset($node->log);
    }

    // When saving a new node revision, unset any existing $node->vid so as to
    // ensure that a new revision will actually be created, then store the old
    // revision ID in a separate property for use by node hook implementations.
    if (!$node->is_new && !empty($node->revision) && $node->vid) {
      $node->old_vid = $node->vid;
      unset($node->vid);
    }

    // Save the node and node revision.
    if ($node->is_new) {
      // For new nodes, save new records for both the node itself and the node
      // revision.
      drupal_write_record('node', $node);
      _node_save_revision($node, $user->uid);
      $op = 'insert';
    }
    else {
      // For existing nodes, update the node record which matches the value of
      // $node->nid.
      drupal_write_record('node', $node, 'nid');
      // Then, if a new node revision was requested, save a new record for
      // that; otherwise, update the node revision record which matches the
      // value of $node->vid.
      if (!empty($node->revision)) {
        _node_save_revision($node, $user->uid);
      }
      else {
        _node_save_revision($node, $user->uid, 'vid');
        $update_node = FALSE;
      }
      $op = 'update';
    }
    if ($update_node) {
      db_update('node')
        ->fields(array('vid' => $node->vid))
        ->condition('nid', $node->nid)
        ->execute();
    }

    // Call the node specific callback (if any). This can be
    // node_invoke($node, 'insert') or
    // node_invoke($node, 'update').
    node_invoke($node, $op);

    // Save fields.
    $function = "field_attach_$op";
    $function('node', $node);

    //module_invoke_all('node_' . $op, $node);
    //module_invoke_all('entity_' . $op, $node, 'node');

    // Update the node access table for this node. There's no need to delete
    // existing records if the node is new.
    $delete = $op == 'update';
    node_access_acquire_grants($node, $delete);

    // Clear internal properties.
    unset($node->is_new);
    unset($node->original);
    // Clear the static loading cache.
    entity_get_controller('node')->resetCache(array($node->nid));

    // Ignore slave server temporarily to give time for the
    // saved node to be propagated to the slave.
    db_ignore_slave();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('node', $e);
    throw $e;
  }
}
