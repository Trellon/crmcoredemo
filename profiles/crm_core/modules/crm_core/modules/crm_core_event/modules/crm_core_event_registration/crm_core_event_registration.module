<?php

/**
 * Implements hook_menu
 */
function crm_core_event_registration_menu() {
  
  $items['admin/structure/crm/event/registration'] = array(
    'title' => t('Event Registration Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_event_registration_config'),
    // @todo: proper permission hook should probably come from the base event module
    'access arguments' => array('administer site configurations'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['node/%node/register/%crm_core_profile'] = array(
    'title' => 'Register',
    'page callback' => 'crm_core_event_registration_attachment_form',
    'page arguments' => array(1, 3),
    'access arguments' => array('crm_core register for events'),
    // this can change in the future
    'type' => MENU_LOCAL_TASK,
  );

  return $items;  
}

/**
 * Main registration form to be attached
 */
function crm_core_event_registration_attachment_form($node, $crm_core_profile) {
  
  drupal_set_title(t('Register for @title', array('@title' => $node->title)));
    
  // check for node type to attach the form
  if ($node->type == variable_get('crm_core_event_registration_content_type', 'page')) {
      // only events that have registration enabled should there be a form
      // @todo: this should not be hard coded, a configuration option
      if ($node->field_eventregtype[LANGUAGE_NONE][0]['value'] == 'internal') {    
        module_load_include('inc', 'crm_core_profile', 'crm_core_profile.forms');
        return drupal_get_form('crm_core_profile_entry_form', $crm_core_profile);
      }
  }
  return;  
}


/**
 * Implements hook_permission
 */
function crm_core_event_registration_permission() {
  return array(
    'crm_core register for events' => array(
      'title' => t('Allow registration of events'),
      'description' => t('Ability to use event registration form on event pages'),
    ),
  );
}

/**
 * Implements hook_crm_core_profile_activity_alter
 */
function crm_core_event_registration_crm_core_profile_activity_alter(&$form, $profile_name) {  
  if ($profile_name == variable_get('crm_core_event_registration_profile', '')) {
    $form['title']['#value'] = 'Event Registration';
    
    // this has to exist because the form is located at 
    // node/nid/register/crm_core_profile_name
    $node = menu_get_object();
    
 
    $event_reference_field = variable_get('crm_core_event_registration_event_ref', '');
    if ($event_reference_field != '') {
      $default_value = sprintf('%s (%s)', $node->title, $node->nid);
      $form['field_registration_event'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $default_value;      
    }
  }  
}

/**
 * Configuration form
 */
function crm_core_event_registration_config($form, &$form_state) {
  
  // we need to get the content type we want to attach
  $_node_types = node_type_get_types();
  $options = array('' => t('--Select--'));
  foreach($_node_types as $node_type) {
    $options[$node_type->type] = $node_type->name;  
  }
  
  // select the content type for the component
  $form['crm_core_event_registration_content_type'] = array(
    '#type' => 'select',
    '#title' => 'Select the content type event',
    '#options' => $options,
    '#description' => t('This will enable the CRM Core Profile form to be attached to the content type'),
    '#default_value' => variable_get('crm_core_event_registration_content_type', 'page'),
  );
  
  $crm_core_profiles = crm_core_profile_load_all();
  $profile_options = array('' => t('--Select--'));
  foreach($crm_core_profiles as $crm_core_profile) {
    $profile_options[$crm_core_profile['name']] = $crm_core_profile['label'];  
  }
  
  // profile we will use to attach to the event
  $form['crm_core_event_registration_profile'] = array(
    '#type' => 'select',
    '#title' => 'Select the profile to use for event registration',
    '#options' => $profile_options,
    '#default_value' => variable_get('crm_core_event_registration_profile', ''),
  );
  
  // field for event referencing
  // we get the option list first
  $event_profile = variable_get('crm_core_event_registration_profile', '');
  if ($event_profile != '') {
     $field_options = array('' => t('--Select--'));
     // load the crm_core_profile activity info
     $crm_core_profile_activity = crm_core_profile_activity_load($event_profile);
     foreach(field_info_instances('crm_core_activity', $crm_core_profile_activity['bundle_type']) as $field_name => $field) {
      $field_options[$field_name] = $field['label'];
    }
    
       // profile we will use to attach to the event
       $form['crm_core_event_registration_event_ref'] = array(
         '#type' => 'select',
         '#title' => 'Select the activity reference field to use for the event',
         '#options' => $field_options,
         '#description' => t('The activity field should usually be a entity reference field to the event content type'),
         '#default_value' => variable_get('crm_core_event_registration_event_ref', ''),
       );
          
  }
  

  
  return system_settings_form($form); 
     
}