<?php

/**
 * @file
 * Provides contact entity and integration.
 */

// Integration with context.
module_load_include('inc', 'crm_core_contact', 'crm_core_contact.context');

/**
 * Implements hook_entity_info().
 */
function crm_core_contact_entity_info() {
  $return = array(
    'crm_core_contact' => array(
      'label' => t('CRM Contact'),
      'entity class' => 'CRMCoreContactEntity',
      'controller class' => 'CRMCoreContactController',
      'base table' => 'crm_core_contact',
      'revision table' => 'crm_core_contact_revision',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'contact_id',
        'revision' => 'vid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'crm_core_contact_access',
      'permission labels' => array(
        'singular' => t('contact'),
        'plural' => t('contacts'),
       ),
    ),
  );

  $return['crm_core_contact_type'] = array(
    'label' => t('CRM Contact Type'),
    'entity class' => 'CRMContactType',
    'controller class' => 'CRMCoreContactTypeController',
    'base table' => 'crm_core_contact_type',
    'fieldable' => FALSE,
    'bundle of' => 'crm_core_contact',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'name',
    ),
    'module' => 'crm_core_contact',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/crm/contact-types',
      'file' => 'crm_core_contact.admin.inc',
      'controller class' => 'EntityDefaultUIController',
    ),
    'access callback' => 'crm_core_contact_type_access',
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify contact bundles to avoid a recursion, as loading
 * the contact types needs the entity info too.
 */
function crm_core_contact_entity_info_alter(&$entity_info) {
  foreach (crm_core_contact_type_get_name() as $type => $name) {
    $entity_info['crm_core_contact']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/crm/contact-types/manage/%crm_core_contact_type',
        'real path' => 'admin/structure/crm/contact-types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer contact types'),
      ),
    );
  }
}

/**
 * Access callback for crm_core_contact_type entities.
 */
function crm_core_contact_type_access($op, $entity, $account, $entity_type) {
  return user_access('administer contact types', $account);
}

/**
 * Implements hook_permission().
 */
function crm_core_contact_permission() {
  $permissions = array(
    'administer contact types' => array(
      'title' => t('Administer Contact Types'),
      'description' => t('Allows the user to edit the types of contact such as Individual, Organization, etc.'),
    ),
//    'view contachook_permits' => array(
//      'title' => t('View Contacts'),
//      'description' => t('Allows the user to view list of CRM contacts.'),
//    ),hook_permi
    'view disabled contact types' => array(
      'title' => t('View Disabled Contact Types'),
      'description' => t('Allows the user to view disabled contact types'),
    ),
    'revert contact record' => array(
      'title' => ('Revert Contact Record'),
      'description' => t('Allows the user to have ability to revert contacts'),
    ),
//    'add contacts' => array(
//      'title' => t('Add Contacts'),
//      'description' => t('Allows the user to add contact to the CRM.'),
//    ),
//    'edit contacts' => array(
//      'title' => t('Edit Contacts'),
//      'description' => t('Allows the user to edit contacts that have already been added to the CRM.'),
//    ),
  );

  $permissions += crm_core_entity_access_permissions('crm_core_contact');

  return $permissions;

}

/**
 * Check permission for various contact operations
 *
 * @param stdClass $crm_core_contact_type
 * A crm_core_contact_type object
 *
 * @return
 * bool TRUE if access is granted/FALSE is access is denied
 */
function crm_core_contact_access($op, $contact, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  if (is_object($contact)) {
    $contact_type = $contact->type;
  }
  else {
    $contact_type = $contact;
  }

  if ($op != 'view' && $op != 'create_view') {
    // First grant access to the entity for the specified operation if no other
    // module denies it and at least one other module says to grant access.
    $access_results = module_invoke_all('crm_core_entity_access', $op, $contact, $account, $entity_type);

    if (in_array(FALSE, $access_results, TRUE)) {
      return FALSE;
    }
    elseif (in_array(TRUE, $access_results, TRUE)) {
      return TRUE;
    }
  }

  $administer_contact = user_access('administer crm_core_contact entities', $account);

  switch ($op) {
    case 'view':
      $view_any_contact = user_access('view any crm_core_contact entity', $account);
      $view_type_contact = user_access('view any crm_core_contact entity of bundle ' . $contact_type, $account);
      return ($administer_contact || $view_any_contact || $view_type_contact);
    break;
    case 'edit':
    case 'delete':
      $edit_any_contact = user_access('edit any crm_core_contact entity', $account);
      $edit_type_contact = user_access('edit any crm_core_contact entity of bundle ' . $contact_type, $account);
      return ($administer_contact || $edit_any_contact || $edit_type_contact);
    break;
    case 'revert':
      // @todo: more fine grained will be adjusting dynamic permission generation for reverting bundles of contact
      $revert_any_contact = user_access('revert contact record', $account);
      return ($administer_contact || $revert_any_contact);
    break;
    case 'create_view':
      // we just need any of the create permissions
      $create_any_contact = user_access('create crm_core_contact entities', $account);
      $contact_types = array_keys(crm_core_contact_types(TRUE));
      foreach($contact_types as $type) {
        $create_type_contact[] = entity_access('create', 'crm_core_contact', $type, $account);
      }
      // they just need any type of contact type create permission
      $create_type_contact_flag = in_array(TRUE, $create_type_contact);
      return ($administer_contact || $create_any_contact || $create_type_contact_flag);
    case 'create':
    default:
      // must be able to create contact of any type (OR) specific type
      // (AND) have an active contact type
      // IMPORTANT, here $contact is padded in as a string of the contact type
      $create_any_contact = user_access('create crm_core_contact entities', $account);
      $create_type_contact = user_access('create crm_core_contact entities of bundle ' . $contact_type, $account);
      // load the contact type entity
      $contact_type_entity = crm_core_contact_type_load($contact_type);
      $contact_type_is_active = (!(bool) $contact_type_entity->disabled);
      return (($administer_contact || $create_any_contact || $create_type_contact) && $contact_type_is_active);
  }
}

/**
 * Implements hook_views_api().
 */
function crm_core_contact_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_core_contact') . '/includes/views',
  );
}

/**
 * Implements hook_search_info().
 */
function crm_core_contact_search_info() {
  return array(
    'title' => 'CRM Contacts',
    'path' => 'contact',
  );
}

/**
 * Implements hook_search_access().
 */
function crm_core_contact_search_access() {
  return user_access('administer crm_core_contact entities') || user_access('view any crm_core_contact entity');
}

/**
 * Implements hook_search_reset().
 */
function crm_core_contact_search_reset() {
  db_update('search_dataset')
    ->fields(array('reindex' => REQUEST_TIME))
    ->condition('type', 'crm_core_contact')
    ->execute();
}

/**
 * Implements hook_search_status().
 */
function crm_core_contact_search_status() {
  $total = db_query('SELECT COUNT(*) FROM {crm_core_contact}')->fetchField();
  $remaining = db_query("SELECT COUNT(*) FROM {crm_core_contact} c LEFT JOIN {search_dataset} d ON d.type = 'crm_core_contact' AND d.sid = c.contact_id WHERE d.sid IS NULL OR d.reindex <> 0")->fetchField();
  return array('remaining' => $remaining, 'total' => $total);
}

/**
 * Implements hook_search_execute().
 */
function crm_core_contact_search_execute($keys = NULL, $conditions = NULL) {
  // Build matching conditions

  $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('SearchQuery')->extend('PagerDefault');
  $query->join('crm_core_contact', 'c', 'c.contact_id = i.sid');
  $query->searchExpression($keys, 'crm_core_contact');

  // Insert special keywords.
  $query->setOption('type', 'c.type');
  $query->setOption('language', 'c.language');

  // Only continue if the first pass query matches.
  if (!$query->executeFirstPass()) {
    return array();
  }

  // Load results.
  $find = $query
    ->limit(10)
    ->execute();
  $results = array();
  foreach ($find as $item) {
    // Render the contact.
    $contact = crm_core_contact_load($item->sid);
    $build = crm_core_contact_view($contact);
    unset($build['#theme']);
    $contact->rendered = drupal_render($build);
	$title = field_get_items('crm_core_contact', $contact, 'contact_name');
	$title = name_format($title[0], '((((t+ig)+im)+if)+is)+jc');
    $uri = entity_uri('crm_core_contact', $contact);
    $results[] = array(
      'link' => url($uri['path'], array_merge($uri['options'], array('absolute' => TRUE))),
      'type' => check_plain(crm_core_contact_type_get_name($contact->type)),
      'title' => $title,
      'user' => theme('username', array('account' => user_load($contact->uid))),
      'date' => $contact->changed,
      'contact' => $contact,
      'score' => $item->calculated_score,
      'snippet' => search_excerpt($keys, $contact->rendered),
      'language' => (isset($contact->language)) ? $contact->language : LANGUAGE_NONE,
    );
  }
  return $results;
}

/**
 * Search condition callback.
 */
function crm_core_contact_search_conditions_callback($keys) {
  $conditions = array();

  if (!empty($_REQUEST['keys'])) {
    $conditions['keys'] = $_REQUEST['keys'];
  }
  if (!empty($_REQUEST['sample_search_keys'])) {
    $conditions['sample_search_keys'] = $_REQUEST['sample_search_keys'];
  }
  if ($force_keys = variable_get('sample_search_force_keywords', '')) {
    $conditions['sample_search_force_keywords'] = $force_keys;
  }
  return $conditions;
}

/**
 * Implements hook_update_index().
 */
function crm_core_contact_update_index() {
  $limit = (int) variable_get('search_cron_limit', 100);

  $result = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c LEFT JOIN {search_dataset} d ON d.type = 'crm_core_contact' AND d.sid = c.contact_id WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, c.contact_id ASC", 0, $limit);

  foreach ($result as $contact) {
    $contact = crm_core_contact_load($contact->contact_id);
    variable_set('crm_core_contact_cron_last', $contact->changed);

    // Render the contact.
    $text = drupal_render(crm_core_contact_view($contact));
    // Update index
    search_index($contact->contact_id, 'crm_core_contact', $text);
  }
}

/**
 * Entity label callback.
 */
function crm_core_contact_label($entity) {
  // Check whether bundle type label function exists.
  // This is needed if we want to have different labels per contact type.
  // For example Individual contact's label is person's Name.
  // But for Organization -- organization's name.
  $function = 'crm_core_contact_' . $entity->type . '_label';
  if (function_exists($function)) {
    return $function($entity);
  }
  // Default is person's name.
  $field = field_view_field('crm_core_contact', $entity, 'contact_name', 'inline');
  return $field[0]['#markup'];
}

/**
 * Check to see if a contact type is locked, can be disabled/deleted
 *
 * @param
 * stdClass $crm_core_contact_type
 * A fully loaded $crm_core_contact_type object
 *
 * string $op
 * The operation being performed on the contact type to check for
 * can be edit, delete
 *
 * @return
 * bool TRUE if permission given/FALSE if permission denied
 */
function crm_core_contact_type_permission($crm_core_contact_type, $op = 'edit') {

  // first check drupal permission
  if (!user_access('administer contact types')) {
    return FALSE;
  }

  switch($op) {
    case 'enable':
      // only disabled contact type can be enabled
      if ((bool) $crm_core_contact_type->disabled) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    break;
    case 'disable':
      // locked contact type cannot be disabled
      if ((bool) $crm_core_contact_type->locked) {
        return FALSE;
      }
      if ((bool) $crm_core_contact_type->disabled) {
        return FALSE;
      }
    break;
    case 'delete':
      // if contact type is locked, you can't delete it
      if ((bool) $crm_core_contact_type->locked) {
        return FALSE;
      }
      // if contact instance of this contact type exist, you can't delete it
      $count = db_query("SELECT count(*) FROM {crm_core_contact} WHERE `type` = :type",
      array(':type' => $crm_core_contact_type->type))->fetchField();
      if ($count > 0) {
        return FALSE;
      }
    break;
    case 'edit':
    default:
      // if the contact type is locked, you can't edit it.
      if ((bool) $crm_core_contact_type->locked) {
        return FALSE;
      }

      if ((bool) $crm_core_contact_type->disabled) {
        return FALSE;
      }

    break;
  }

  return TRUE;

}

/**
 * Returns an array of contact type objects keyed by type.
 *
 * @param
 * bool $active
 * TRUE if we only want to select active contact types
 * FALSE if we want to select all contact types
 *
 * @return
 * array $contact_types
 * An numeric index array of contact types (machine names)
 */
function crm_core_contact_types($active = FALSE) {
  // First check the static cache for a contact types array.
  $contact_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($contact_types)) {
    if ($active) {
      $contact_types = db_query('SELECT * FROM {crm_core_contact_type} WHERE disabled = 0')->fetchAllAssoc('type');
    } else {
      $contact_types = db_query('SELECT * FROM {crm_core_contact_type}')->fetchAllAssoc('type');
    }
  }

  return $contact_types;
}


/**
 * Returns the human readable name of any or all contact types.
 *
 * @param $type
 *  [optional] - Specify the type whose name to return.
 * @return
 *  If $type is specified, a string containing the human
 *  readable name of the type.
 *  If $type isn't specified an array containing all human
 *  readable names keyed on the machine type.
 */
function crm_core_contact_type_get_name($type = NULL) {
  $contact_types = crm_core_contact_types();

  // If type is set return the name if it exists
  if (!empty($type)) {
    if (isset($contact_types[$type])) {
      return $contact_types[$type]->name;
    }
    else {
      return FALSE;
    }
  }

  // Otherwise return a mapping of type => name
  foreach ($contact_types as $key => $value) {
    $contact_types[$key] = $value->name;
  }

  return $contact_types;
}


/**
 * Return a new contact type with initialize fields.
 *
 * @param string $type
 *   The machine-readable name of the contact type. (eg. individual)
 *
 * @return
 *   A stdClass object with contact type fields
 */
function crm_core_contact_type_new($type = '') {
  $values = array('type' => $type);
  return entity_create('crm_core_contact_type', $values);
}


/**
 * Loads a contact type.
 *
 * @param string $type
 *   The machine-readable name of the contact type.
 */
function crm_core_contact_type_load($type, $reset = FALSE) {
  $results = entity_load('crm_core_contact_type', FALSE, array('type' => $type), $reset);
  return reset($results);
}


/**
 * Saves a contact type.
 *
 * @param $contact_type object
 *
 * @return
 *   FALSE if the insert fails and SAVED_NEW or SAVED_UPDATED
 *   based on the operation performed
 */
function crm_core_contact_type_save($contact_type) {
  entity_save('crm_core_contact_type', $contact_type);
}

/**
 * Delete a contact type.
 *
 * @param stdClass $crm_core_contact_type
 * A loaded $crm_core_contact_type object
 *
 */
function crm_core_contact_type_delete($type_id) {
  entity_get_controller('crm_core_contact_type')->delete(array($type_id));
}


/**
 * Sets the default contact type
 * @param array $info
 *   an associative array of contact type information
 *   possible keys:
 *     - type
 *     - name
 *     - description
 *     - custom
 *     - modified
 *     - is_new
 *
 * @return
 * A default contact type
 */
function crm_core_contact_type_set_defaults($info = array()) {
  $type = &drupal_static(__FUNCTION__);

  if (!isset($type)) {
    $type = new stdClass();
    $type->type = '';
    $type->name = '';
    $type->description = '';
    $type->custom = 0;
    $type->disabled = 0;
    $type->locked = 0;
    $type->modified = 0;
    $type->is_new = 1;
  }

  $new_type = clone $type;
  $info = (array) $info;
  foreach ($info as $key => $data) {
    $new_type->$key = $data;
  }
  $new_type->orig_type = isset($info['type']) ? $info['type'] : '';

  return $new_type;
}

/**
* Checks to see if a given contact type already exists.
*
* @param $type
* The string to match against existing types.
*
* @return
* TRUE or FALSE indicating whether or not the contact type exists.
*/
function crm_core_contact_type_validate_unique($type) {
  // Look for a match of the type.
  $match_id = db_query('SELECT type FROM {crm_core_contact_type} WHERE type = :type', array(':type' => $type))->fetchField();
  return !$match_id;
}


/**
 * Save a contact
 *
 * @param stdClass $contact
 *   The contact object to be saved
 *
 * @return
 *   a contact object upon successful save
 *   or an exception thrown
 */
function crm_core_contact_save($contact) {
  return entity_get_controller('crm_core_contact')->save($contact);
}


/**
 * Load a contact
 *
 * @param int $contact_id
 *   Contact id of the contact to be loaded
 * @param array $conditions
 *   @see crm_core_contact_load_multiple()
 * @return
 *   A contact object upon successful load
 *   FALSE if loading fails
 */
function crm_core_contact_load($contact_id, $conditions = array()) {
  if (empty($contact_id)) {
    return array();
  }

  if ($contact_id !== FALSE) {
    $contact_id = array($contact_id);
  }

  $contacts = crm_core_contact_load_multiple($contact_id, $conditions);
  return $contacts ? reset($contacts) : FALSE;
}


/**
 * Load one or more contact
 *
 * @param array $contact_ids
 *   An array of contact id to be loaded
 * @param array $conditions (deprecated)
 *   An associative array of conditions on the base table
 *   with keys equal to the field name and value equal to
 *   the value the fields must have
 *
 * @return
 *   An array of entity object indexed by their ids
 */
function crm_core_contact_load_multiple($contact_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_core_contact', $contact_ids, $conditions, $reset);
}


/**
 * Delete single contact records
 *   The wrapper for delete() method of 'crm_core_contact' controller.
 *
 * @param $contact_id
 * contact id
 *
 * @return
 * TRUE or throw exception and write it to watchdog.
 */
function crm_core_contact_delete($contact_id) {
  return crm_core_contact_delete_multiple(array($contact_id));
}


/**
 * Delete multiply contact records
 *   The wrapper for delete() method of 'crm_core_contact' controller.
 *
 * @param $contact_ids
 * flat array of contact ids like array(5, 6, 7);
 *
 * @return
 * TRUE or throw exception and write it to watchdog.
 */
function crm_core_contact_delete_multiple($contact_ids = array()) {
  return entity_get_controller('crm_core_contact')->delete($contact_ids);
}


/**
 * View a single contact record.
 */
function crm_core_contact_view($contact) {
  $contact->content = array();
  $view_mode = 'full';
  $langcode = LANGUAGE_NONE;
  field_attach_prepare_view('crm_core_contact', array($contact->contact_id => $contact), $view_mode);
  // Add content added by fields.
  $contact->content += field_attach_view('crm_core_contact', $contact, $view_mode);
  module_invoke_all('entity_view', $contact, 'crm_core_contact', $view_mode, $langcode);
  $build = $contact->content;
  unset($contact->content);
  return $build;
}


/**
 * Title callback for a contact.
 *
 * @param $contact object
 *
 * @return title string
 */
function crm_core_contact_title($contact) {
  return entity_label('crm_core_contact', $contact);
}


/**
 * Fetch revision list for a contact
 *
 * @param stdClass $contact
 *
 * @return
 *   An associative array of revision information for
 *   a given contact (keys below)
 *     - vid
 *     - log
 *     - created
 *     - changed
 *     - uid
 */
function crm_core_contact_revision_list($contact) {
  return db_select('crm_core_contact_revision', 'rev')->
           fields('rev', array('vid', 'log', 'created', 'changed', 'uid'))->
           condition('contact_id', $contact->contact_id)->
           execute()->
           fetchAllAssoc('vid', $fetch);
}


/**
 * Return a contact object structure
 *
 * @param stdClass $contact
 *
 * @return
 * A structured contact string
 */
function crm_core_contact_devel_load_object($contact) {
  module_load_include('inc', 'devel', 'devel.pages');
  return devel_load_object('crm_core_contact', $contact);
}


/**
 * Print the contact structure being loaded
 *
 * @param stdClass $contact
 *
 * @return
 * prints a structured contact object
 */
function crm_core_contact_devel_render_object($contact) {
  module_load_include('inc', 'devel', 'devel.pages');
  return devel_render_object('crm_core_contact', $contact);
}


/**
 * Revert a contact to a previous revision
 *
 * @param stdClass $contact
 * @param int $vid
 *
 * @return
 * TRUE upon success, FALSE upon failure
 */
function crm_core_contact_revert($contact, $vid) {
  return entity_get_controller('crm_core_contact')->revertContact($contact, $vid);
}


/**
 * Implements hook_feeds_plugins().
 */
function crm_core_contact_feeds_plugins() {
  $info['CRMFeedsContactProcessor'] = array(
    'name' => 'CRM Contact processor',
    'description' => 'Create and update CRM contacts.',
    'help' => 'Create and update CRM contacts from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'CRMFeedsContactProcessor',
      'file' => 'CRMFeedsContactProcessor.inc',
      'path' => drupal_get_path('module', 'crm_core_contact') . '/includes',
    ),
  );
  return $info;
}

/*
 * Implements hook_enable().
 */
function crm_core_contact_enable() {
  //clear the cache to display in Feeds as available plugin.
  cache_clear_all('plugins:feeds:plugins', 'cache');
}


/*
 * Implements hook_file_download_access().
 */
function crm_core_contact_file_download_access($file_item, $entity_type, $entity) {
  if ($entity_type == 'crm_core_contact') {
    return crm_core_contact_access('view', $entity);
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Adds OR logic when searching contacts by name.
 *
 * @param QueryAlterableInterface $query
 */
function crm_core_contact_query_crm_core_contact_search_alter(QueryAlterableInterface $query) {
  // TODO: get field names automatically
  $tables =& $query->getTables();
  
  // only dealing with 1 table (field_data_contact_name)
  $table = current($tables);
  $alias = $table['alias'];
  
  $fields = array(
    'title' => 'contact_name_title',
    'given' => 'contact_name_given',
    'middle' => 'contact_name_middle',
    'family' => 'contact_name_family',
    'generational' => 'contact_name_generational',
    'credentials' => 'contact_name_credentials',
  );

  $value = '%' . db_like($query->alterMetaData['match']) . '%';
  $placeholder = ':' . $table . '_fulltext';

  $where_expression = "LOWER(CONCAT(' ', COALESCE({$alias}.{$fields['title']}, ''), ' ', COALESCE({$alias}.{$fields['given']}, ''), ' ', COALESCE({$alias}.{$fields['middle']}, ''), ' ', COALESCE({$alias}.{$fields['family']}, ''), ' ', COALESCE({$alias}.{$fields['generational']}, ''), ' ', COALESCE({$alias}.{$fields['credentials']}, ''))) LIKE $placeholder";
  $query->innerJoin('crm_core_contact', 'crm_core_contact', "crm_core_contact.contact_id = {$alias}.entity_id");
  $query->where($where_expression, array($placeholder => $value));

  /*
  Altermative way to do it.

  $or = db_or()
    ->condition('field_data_contact_name.contact_name_family', '%' . $query->alterMetaData['match'] . '%', 'LIKE')
    ->condition('field_data_contact_name.contact_name_given', '%' . $query->alterMetaData['match'] . '%', 'LIKE');
  $query->condition($or);
  */
}

/**
 * Implements hook_ctools_plugin_directory() to let the system know
 * where our task and task_handler plugins are.
 */
function crm_core_contact_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'page_manager' && $plugin_type == 'tasks') {
    return 'plugins/' . $plugin_type;
  }
}
