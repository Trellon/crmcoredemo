<?php

/**
 * Include file with hook_property_info().
 */
module_load_include('inc', 'crm_core_activity', 'crm_core_activity.info');

/**
 * Implements hook_entity_info().
 */
function crm_core_activity_entity_info() {
  $return = array(
    'crm_core_activity' => array(
      'label' => t('CRM Activity'),
      'entity class' => 'CRMCoreActivityEntity',
      'controller class' => 'CRMCoreActivityController',
      'base table' => 'crm_core_activity',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'activity_id',
        'bundle' => 'type',
        'label' => 'title'
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'crm_core_activity_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'crm_core_activity_access',
      'module' => 'crm_core_activity',
      'permission labels' => array(
        'singular' => t('activity'),
        'plural' => t('activities'),
      ),
    ),
  );
  $return['crm_core_activity_type'] = array(
    'label' => t('CRM Activity Type'),
    'entity class' => 'CRMActivityType',
    'controller class' => 'CRMCoreActivityTypeController',
    'base table' => 'crm_core_activity_type',
    'fieldable' => FALSE,
    'bundle of' => 'crm_core_activity',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'crm_core_activity',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/crm/activity-types',
      'file' => 'crm_core_activity.admin.inc',
      'controller class' => 'EntityDefaultUIController',
    ),
    'access callback' => 'crm_core_activity_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify profile bundles to avoid a recursion, as loading
 * the profile types needs the entity info too.
 */
function crm_core_activity_entity_info_alter(&$entity_info) {
  foreach (crm_core_activity_types() as $type => $info) {
    $entity_info['crm_core_activity']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/crm/activity-types/manage/%crm_core_activity_type',
        'real path' => 'admin/structure/crm/activity-types/manage/' . $type,
        'bundle argument' => 5,
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function crm_core_activity_permission() {
  $permissions = array(
    'administer crm_core_activity types' => array(
      'title' => t('Administer activity types'),
      'description' => t('Allows users to configure activity types and their fields.'),
      'restrict access' => TRUE,
    ),
  );

  $permissions += crm_core_entity_access_permissions('crm_core_activity');

  return $permissions;
}

/**
 * Access callback for activity.
 */
function crm_core_activity_access($op, $activity, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  if (is_object($activity)) {
    $activity_type = $activity->type;
  }
  else {
    $activity_type = $activity;
  }

  if ($op != 'view') {
    // First grant access to the entity for the specified operation if no other
    // module denies it and at least one other module says to grant access.
    $access_results = module_invoke_all('crm_core_entity_access', $op, $activity, $account, $entity_type);

    if (in_array(FALSE, $access_results, TRUE)) {
      return FALSE;
    }
    elseif (in_array(TRUE, $access_results, TRUE)) {
      return TRUE;
    }
  }

  switch ($op) {
    case 'create':
      return (user_access('administer crm_core_activity entities', $account)
       || user_access('create crm_core_activity entities', $account)
       || user_access('create crm_core_activity entities of bundle ' . $activity_type, $account));
    case 'view':
      return (user_access('administer crm_core_activity entities', $account)
       || user_access('view any crm_core_activity entity', $account)
       || user_access('view any crm_core_activity entity of bundle ' . $activity_type, $account));
    case 'edit':
    case 'update':
    case 'delete':
      return (user_access('administer crm_core_activity entities', $account)
       || user_access('edit any crm_core_activity entity', $account)
       || user_access('edit any crm_core_activity entity of bundle ' . $activity_type));
  }
}

/**
 * Activity type access callback.
 */
function crm_core_activity_type_access() {
  return user_access('administer activity types');
}

/*******************************************************************************
 ********************** CRM Activity helpers ***********************************
 ******************************************************************************/

/**
 * Load a CRM Activity object.
 */
function crm_core_activity_load($activity_id, $reset = FALSE) {
  if (empty($activity_id)) {
    return array();
  }

  if ($activity_id !== FALSE) {
    $activity_id = array($activity_id);
  }

  $activities = crm_core_activity_load_multiple($activity_id, array(), $reset);
  return reset($activities);
}

/**
 * Load multiple activities based on certain conditions.
 */
function crm_core_activity_load_multiple($activity_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_core_activity', $activity_ids, $conditions, $reset);
}

/**
 * Save single activity object to db.
 *   Wrapper for controller.
 *
 * @param object $activity
 *   Entity object of crm_core_activity type.
 */
function crm_core_activity_save($activity) {
  return entity_get_controller('crm_core_activity')->save($activity);
}

/**
 * Delete single activity.
 *
 * @param object $activity
 *   Entity object of crm_core_activity type.
 */
function crm_core_activity_delete($activity) {
  crm_core_activity_delete_multiple(array($activity->activity_id));
}

/**
 * Delete multiple activities.
 *   Wrapper for controller.
 *
 * @param array $activity_ids
 *   array of entity ids that should be deleted.
 */
function crm_core_activity_delete_multiple($activity_ids) {
  entity_get_controller('crm_core_activity')->delete($activity_ids);
}

/**
 * Implements hook_field_extra_fields().
 */
function crm_core_activity_field_extra_fields() {
  $extra = array();

  foreach (crm_core_activity_types() as $type) {
    $extra['crm_core_activity'][$type->type] = array(
      'form' => array(
        'title' => array(
          'label' => 'Title',
          'description' => t('CRM Core Activity module element'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/*******************************************************************************
 ********************** CRM Activity Type helpers ******************************
 ******************************************************************************/

/**
 * Load Activity Type.
 */
function crm_core_activity_type_load($activity_type) {
  return crm_core_activity_types($activity_type);
}

/**
 * List of Activity Types.
 */
function crm_core_activity_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('crm_core_activity_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Get activity type name by machine name of activity type.
 *
 * @param type $type_name
 * @return type
 */
function crm_core_activity_type_get_name($type_name = NULL) {
  $types = crm_core_activity_types();

  $names = array();
  foreach ($types as $type) {
    $names[$type->type] = $type->label;
  }

  if (!empty($type_name)) {
    if (isset($names[$type_name])) {
      return $names[$type_name];
    }
    else {
      return FALSE;
    }
  }
  return $names;
}

/**
 * Creates or Saves an activity type
 *
 * @param stdClass $activity_type
 *   The activity type info to be saved
 *
 */
function crm_core_activity_type_save($activity_type) {
  return entity_get_controller('crm_core_activity_type')->save($activity_type);
}

/**
 * Implements hook_crm_core_activity_type_insert().
 *
 * Add default fields.
 */
function crm_core_activity_crm_core_activity_type_insert($activity_type) {
  module_load_include('inc', 'crm_core_activity', 'crm_core_activity.admin');
  crm_core_activity_type_add_default_fields($activity_type);
}

/**
 * Implements hook_forms().
 *
 * Create form for adding/editing crm_activity.
 * Their id is like 'crm_activity_edit_' . $bundle . '_form'.
 *
 * @see entity_ui_get_form().
 */
function crm_core_activity_forms($form_id, $args) {
  $forms = array();

  // Check whether it is crm_activity form.
  if (strpos($form_id, 'crm_core_activity_edit_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'crm_core_activity_form',
    );
  }

  return $forms;
}

/**
 * Activity view callback.
 */
function crm_core_activity_view($activity) {
  $content = entity_get_controller('crm_core_activity')->view(array($activity->activity_id => $activity), 'full');

  // We don't want to run output through entity theming function.
  // To avoid this hack apply patch from http://drupal.org/node/1259916
  // Then we can load content in following way
  // $content = entity_build_content('crm_core_activity', $activity);
  unset($content['crm_core_activity'][$activity->activity_id]['#theme']);
  return $content;
}

/**
 * Implements hook_views_api().
 */
function crm_core_activity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_core_activity') . '/views',
  );
}

/**
 * Implements hook_crm_core_contact_delete().
 *
 * Adjusts Activities where contact is used in primary participants.
 *
 * @param object $crm_core_contact
 *   A fully loaded object representing Contact being deleted.
 */
function crm_core_activity_crm_core_contact_delete($crm_core_contact) {
  $query = new EntityFieldQuery;
  $results = $query
    ->entityCondition('entity_type', 'crm_core_activity')
    ->fieldCondition('field_activity_participants', 'target_id', $crm_core_contact->contact_id)
    ->execute();

  if (empty($results)) {
    // No related Activities.
    return;
  }

  // Load fully populated Activity objects to analyze/update.
  $activity_ids = array_keys($results['crm_core_activity']);
  $crm_core_activities = crm_core_activity_load_multiple($activity_ids);

  $activities_to_remove = array();

  foreach($crm_core_activities as $crm_core_activity) {
    $wrapped_activity = entity_metadata_wrapper('crm_core_activity', $crm_core_activity);
    $participants = $wrapped_activity->field_activity_participants->value(array('identifier' => TRUE));

    // Remove Contact from participants array
    $participants = array_diff($participants, array($crm_core_contact->contact_id));

    if (empty($participants)) {
      // Last main participant was deleted, so we should kill entire activity.
      $activities_to_remove[] = $crm_core_activity->activity_id;
    }
    else {
      // Save Activity with renewed list.
      $wrapped_activity->field_activity_participants->set($participants);
      crm_core_activity_save($crm_core_activity);
    }
  }

  if (!empty($activities_to_remove)) {
    watchdog('crm_core_activity', 'Deleted !count activities due to delection contact with id=%contact_id.',
      array('!count' => count($activities_to_remove),
        '%contact_id' => $crm_core_contact->contact_id),
      WATCHDOG_INFO);
    crm_core_activity_delete_multiple($activities_to_remove);
  }
}

/**
 * Implements hook_search_info().
 */
function crm_core_activity_search_info() {
  return array(
    'title' => 'CRM Activities',
    'path' => 'activity',
  );
}

/**
 * Implements hook_search_access().
 */
function crm_core_activity_search_access() {
  return user_access('administer crm_core_activity entities') || user_access('view any crm_core_activity entity');
}

/**
 * Implements hook_search_reset().
 */
function crm_core_activity_search_reset() {
  db_update('search_dataset')
    ->fields(array('reindex' => REQUEST_TIME))
    ->condition('type', 'crm_core_activity')
    ->execute();
}

/**
 * Implements hook_search_status().
 */
function crm_core_activity_search_status() {
  $total = db_query('SELECT COUNT(*) FROM {crm_core_activity}')->fetchField();
  $remaining = db_query("SELECT COUNT(*) FROM {crm_core_activity} a LEFT JOIN {search_dataset} d ON d.type = 'crm_core_activity' AND d.sid = a.activity_id WHERE d.sid IS NULL OR d.reindex <> 0")->fetchField();
  return array('remaining' => $remaining, 'total' => $total);
}

/**
 * Implements hook_search_execute().
 */
function crm_core_activity_search_execute($keys = NULL, $conditions = NULL) {
  // Build matching conditions

  $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('SearchQuery')->extend('PagerDefault');
  $query->join('crm_core_activity', 'a', 'a.activity_id = i.sid');
  $query->searchExpression($keys, 'crm_core_activity');

  // Insert special keywords.
  $query->setOption('type', 'a.type');
  $query->setOption('language', 'a.language');

  // Only continue if the first pass query matches.
  if (!$query->executeFirstPass()) {
    return array();
  }

  // Load results.
  $find = $query
    ->limit(10)
    ->execute();
  $results = array();
  foreach ($find as $item) {
    // Render the contact.
    $activity = crm_core_activity_load($item->sid);
    $build = crm_core_activity_view($activity);
    unset($build['#theme']);
    $activity->rendered = drupal_render($build);
    $uri = entity_uri('crm_core_activity', $activity);
    $results[] = array(
      'link' => url($uri['path'], array_merge($uri['options'], array('absolute' => TRUE))),
      'type' => check_plain(crm_core_activity_type_get_name($activity->type)),
      'title' => check_plain($activity->title),
      'user' => theme('username', array('account' => user_load($activity->uid))),
      'date' => $activity->changed,
      'contact' => $activity,
      'score' => $item->calculated_score,
      'snippet' => search_excerpt($keys, $activity->rendered),
      'language' => (isset($activity->language)) ? $activity->language : LANGUAGE_NONE,
    );
  }
  return $results;
}

/**
 * Search condition callback.
 */
  function crm_core_activity_search_conditions_callback($keys) {
  $conditions = array();

  if (!empty($_REQUEST['keys'])) {
    $conditions['keys'] = $_REQUEST['keys'];
  }
  if (!empty($_REQUEST['sample_search_keys'])) {
    $conditions['sample_search_keys'] = $_REQUEST['sample_search_keys'];
  }
  if ($force_keys = variable_get('sample_search_force_keywords', '')) {
    $conditions['sample_search_force_keywords'] = $force_keys;
  }
  return $conditions;
}

/**
 * Implements hook_update_index().
 */
function crm_core_activity_update_index() {
  $limit = (int) variable_get('search_cron_limit', 100);

  $result = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a LEFT JOIN {search_dataset} d ON d.type = 'crm_core_activity' AND d.sid = a.activity_id WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, a.activity_id ASC", 0, $limit);

  foreach ($result as $activity) {
    $activity = crm_core_activity_load($activity->activity_id);
    variable_set('crm_core_activity_cron_last', $activity->changed);

    // Render the activity.
    $text = drupal_render(crm_core_activity_view($activity));
    // Update index
    search_index($activity->activity_id, 'crm_core_activity', $text);
  }
}


/**
 * Implements hook_feeds_plugins().
 */
function crm_core_activity_feeds_plugins() {
  $info['CRMFeedsActivityProcessor'] = array(
    'name' => 'CRM Activity processor',
    'description' => 'Create and update CRM activities.',
    'help' => 'Create and update CRM activities from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'CRMFeedsActivityProcessor',
      'file' => 'CRMFeedsActivityProcessor.inc',
      'path' => drupal_get_path('module', 'crm_core_activity') . '/includes',
    ),
  );
  return $info;
}

/*
 * Implements hook_enable().
 */
function crm_core_activity_enable() {
  //clear the cache to display in Feeds as available plugin.
  cache_clear_all('plugins:feeds:plugins', 'cache');
}

/*
 * Implements hook_file_download_access().
 */
function crm_core_activity_file_download_access($file_item, $entity_type, $entity) {
  if ($entity_type == 'crm_core_activity') {
    return crm_core_activity_access('view', $entity);
  }
}
