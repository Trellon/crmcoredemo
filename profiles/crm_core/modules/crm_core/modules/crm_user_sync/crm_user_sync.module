<?php

/**
 * Implements hook_menu()
 */
function crm_user_sync_menu() {
  $items = array();

  // Only setup ui if crm_ui is present
  $items['admin/structure/crm/user_sync'] = array(
    'title' => t('User Synchronization'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_user_sync_admin'),
    'access arguments' => array('administer user-sync'),
    'file' => 'crm_user_sync.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function crm_user_sync_permission() {
  return array(
    'administer user-sync' => array(
      'title' => t('Administer User Synchronization'),
      'description' => t('Access to configuration pages for User Synchronization'),
    ),
    'edit own contact information' => array(
      'title' => t('Edit own contact information'),
      'description' => t('Allows user to edit his/her own contact record from the user profile form'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function crm_user_sync_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'crm_user_sync') . '/views',
  );
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function crm_user_sync_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $account = $form['#user'];

  // only attach the contact form if a corresponding contact has been found
  $contact = _crm_user_sync_get_related_entity('user', $account->uid, 'crm_user_sync');
  if (empty($contact)) {
    return;
  }
  if (!user_access('edit own contact information')) {
    return;
  }
  $form_state['storage']['crm_core_contact'] = $contact;
  $form['crm_core_contact'] = array(
    '#type' => 'fieldset',
    '#title' => 'Contact Information',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#parents' => array('crm_core_contact'),
    '#tree' => TRUE,
  );

  field_attach_form('crm_core_contact', $contact, $form['crm_core_contact'], $form_state);
  $form['#validate'][] = 'crm_user_sync_user_profile_form_validate';
  $form['#submit'][] = 'crm_user_sync_user_profile_form_submit';

}

/**
 * Validation handler
 */
function crm_user_sync_user_profile_form_validate($form, &$form_state) {
  $contact = $form_state['storage']['crm_core_contact'];
 // Notify field widgets to validate their data.
  field_attach_form_validate('crm_core_contact', $contact, $form['crm_core_contact'], $form_state);
}

/**
 * Submission handler
 */
function crm_user_sync_user_profile_form_submit($form, &$form_state) {
  $contact = &$form_state['storage']['crm_core_contact'];
  // Set the contact's uid if it's being created at this time.
  if (!isset($contact->contact_id)) {
    // @TODO: Investigate how this variable should be used.
    $create = TRUE;
  }
  // Notify field widgets.
  field_attach_submit('crm_core_contact', $contact, $form['crm_core_contact'], $form_state);

  // Save the contact
  crm_core_contact_save($contact);
}


/**
 * Implements hook_user_insert()
 */
function crm_user_sync_user_insert(&$edit, $account, $category) {
  if (variable_get('crm_user_sync_auto_sync_user_create', 1)) {
    crm_user_sync_sync($account);
  }
}

/**
 * Implements hook_user_update()
 */
function crm_user_sync_user_update(&$edit, $account, $category) {
  // user update only ensures that for the given user it should have a corresponding
  // contact record associated with it.
  $related_contact = _crm_user_sync_get_related_entity('user', $account->uid, 'crm_user_sync');
  if (empty($related_contact)) {
      if (variable_get('crm_user_sync_auto_sync_user_create', 1)) {
        crm_user_sync_sync($account);
      }
  }
}

/**
 * Implements hook_user_delete()
 */
function crm_user_sync_user_delete($account) {
  // @TODO: For now we delete the relation only.
  // We should handle this properly in hook_user_cancel() regarding other
  // cancellation methods.
  $query = relation_query('user', $account->uid);
  $query->propertyCondition('relation_type', 'crm_user_sync');
  $query->propertyCondition('arity', 2);
  $relations = $query->execute();
  $relation_ids = array();
  foreach ($relations as $relation) {
    $relation_ids[] = $relation->rid;
  }
  if (!empty($relation_ids)) {
    relation_delete_multiple($relation_ids);
  }
}

/**
 * Synchronizes user.
 * @param $account to be synchronized
 * @param $contact to be associated with $account
 *
 * @return contact object
 */
function crm_user_sync_sync($account, $contact = NULL) {
  // @TODO: think about the logic here, what to do with multiple roles?
  // For now we just use the first that has user-sync enabled, if there is.
  $roles_sync = variable_get('crm_user_sync_roles', array());
  foreach($roles_sync as $rid => $sync_rid) {
    if ($sync_rid == 0) {
      unset($roles_sync[$rid]);
    }
  }
  $roles = array_intersect_key($roles_sync, $account->roles);
  if (empty($roles)) {
    return;
  }

  $rid = key($roles);
  $contact_type = variable_get('crm_user_sync_' . $rid . '_type', 'individual');

  if (empty($contact)) {
    // Create the contact.
    // For now we just add the name.
    $contact = crm_core_contact_type_new($contact_type);
    $contact->uid = $account->uid;

    $contact_name = field_info_instance('crm_core_contact', 'contact_name', $contact_type);
    if (!empty($contact_name)) {
      $contact->contact_name[LANGUAGE_NONE][0] = array(
             'title' => '',
             'family' => '',
             'generational' => '',
             'credentials' => '',
             'given' => $account->name,
      );
    }

    crm_core_contact_save($contact);
  }

  // Create the relation
  $endpoints = array(
    array(
      'entity_type' => 'user',
      'entity_bundle' => 'user',
      'entity_id' => $account->uid,
    ),
    array(
      'entity_type' => 'crm_core_contact',
      'entity_bundle' => $contact_type,
      'entity_id' => $contact->contact_id,
    ),
  );
  $relation = relation_create('crm_user_sync', $endpoints);
  relation_save($relation);

  return $contact;
}

/**
 * Loosely based on relation_rules_get_related_entities.
 */
function _crm_user_sync_get_related_entities($entity_type, $entity_id, $relation_type) {
  $rids = array_keys(relation_query($entity_type, $entity_id)->entityCondition('bundle', $relation_type)->execute());

  $entities_ids = array();
  if (!$rids) {
    return $entities_ids;
  }

  $target_entity_type = ($entity_type == 'user')?'crm_core_contact':'user';
  $rmap = array();

  foreach (relation_load_multiple($rids) as $relation) {
    $data = array();
    foreach ($relation->endpoints[LANGUAGE_NONE] as $endpoint) {
      $data[$endpoint['entity_type']] = $endpoint['entity_id'];
    }
    $entities_ids[] = $data[$target_entity_type];
    $rmap[$data[$target_entity_type]] = $data[$entity_type];
  }

  $entities = entity_load($target_entity_type, $entities_ids);

  $targets = array();

  foreach ($entities as $entity_id => $entity) {
    $targets[$rmap[$entity_id]] = $entity;
  }
  return $targets;
}

/**
 * Copied from relation.module, (beta 1)
 * gives an error if the entity id is not found, so need to fix that
 */
function _crm_user_sync_get_related_entity($entity_type, $entity_id, $relation_type = NULL, $r_index = NULL) {
  $query = relation_query($entity_type, $entity_id);
  if ($relation_type) {
    $query->propertyCondition('relation_type', $relation_type);
  }
  if (isset($r_index)) {
    // $query->propertyCondition('r_index', $r_index);
    $query->fieldCondition('endpoints', 'r_index', $r_index);
  }
  $results = $query->execute();

  if (empty($results)) {
    return;
  }

  $result = reset($results);
  $relation = relation_load($result->rid);
  $request_key = $entity_type . ':' . $entity_id;
  $entities = $relation->endpoints[LANGUAGE_NONE];
  if (isset($entities[0]['entity_type']) && isset($entities[0]['entity_id'])) {
    $first_entity_key = $entities[0]['entity_type'] . ':' . $entities[0]['entity_id'];
    if (isset($r_index)) {
      $request_key = $request_key . ':' . $r_index;
      $first_entity_key = $first_entity_key . ':' . $entities[0]['r_index'];
    }
    if ($request_key == $first_entity_key) {
      $other_endpoints = entity_load($entities[1]['entity_type'], array($entities[1]['entity_id']));
      return reset($other_endpoints);
    }
    $other_endpoints = entity_load($entities[0]['entity_type'], array($entities[0]['entity_id']));
    return reset($other_endpoints);
  }
}

/**
 * Retrieves the related entity based on entity type, ids and relation type.
 */
function crm_user_sync_get_related_entity($entity_type, $entity_id, $relation_type = 'crm_user_sync') {
  if (is_array($entity_id)) {
    return _crm_user_sync_get_related_entities($entity_type, $entity_id, $relation_type);
  }
  else if (is_numeric($entity_id)) {
    return _crm_user_sync_get_related_entity($entity_type, $entity_id, $relation_type);
  }
  return FALSE;
}

/**
 * Retrieves the related contacts for given uid(s).
 */
function crm_user_sync_get_contact_from_uid($uid) {
  return crm_user_sync_get_related_entity('user', $uid, 'crm_user_sync');
}

/**
 * Retrieves the related contacts for given uids.
 */
function crm_user_sync_get_contacts_from_uids($uids) {
  return crm_user_sync_get_related_entity('user', $uids, 'crm_user_sync');
}

/**
 * Retrieves the related users for given contact id(s).
 */
function crm_user_sync_get_user_from_contact_id($contact_id) {
  return crm_user_sync_get_related_entity('crm_core_contact', $contact_id, 'crm_user_sync');
}

/**
 * Retrieves the related users for given contact ids.
 */
function crm_user_sync_get_users_from_contact_ids($contact_ids) {
  return crm_user_sync_get_related_entity('crm_core_contact', $contact_ids, 'crm_user_sync');
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * We need to extend Contact entity with related user for Rules integration.
 */
function crm_user_sync_entity_property_info_alter(&$info) {
  $info['crm_core_contact']['properties']['crm_user_sync_uid'] = array(
    'label' => t('Linked Account'),
    'description' => t('Account related to Contact by crm_user_sync module.'),
    'type' => 'user',
    'getter callback' => 'crm_user_sync_contact_get_user_properties',
  );
}

function crm_user_sync_contact_get_user_properties($entity, array $options, $name, $entity_type) {
  if ($account = _crm_user_sync_get_related_entity('crm_core_contact', $entity->contact_id, 'crm_user_sync')) {
    return $account->uid;
  }
}
